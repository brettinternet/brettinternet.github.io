<feed xmlns="http://www.w3.org/2005/Atom"><title>brett.cloud</title><link rel="self" href="https://brett.cloud/"/><updated>2025-08-11T00:00:00+0000</updated><author><name>Brett Gardiner</name><email>hi@[domain]</email><uri>https://brett.cloud/</uri></author><id>https://brett.cloud/</id><entry><title>Productivity with AI</title><link rel="alternate" href="https://brett.cloud/ai-productivity/"/><id>https://brett.cloud/ai-productivity/</id><published>2025-08-11T00:00:00+0000</published><updated>2025-08-11T00:00:00+0000</updated><summary>&lt;p>My experience with AI has been that it augments my abilities. It can consolidate information and automate tedium to make me more productive. For more sophisticated tasks related to programming, AI cannot replace a hardworking and fully engaged engineer.&lt;/p>
&lt;p>Some people might feel like we&amp;rsquo;re at a moment like this:&lt;/p>
&lt;!-- https://x.com/RyanEls4/status/1879978018204184582 -->
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Software developers in the 60s 🤭 &lt;a href="https://t.co/eZZYTmzl0E">pic.twitter.com/eZZYTmzl0E&lt;/a>&lt;/p>&amp;mdash; Ryan Els (@RyanEls4) &lt;a href="https://twitter.com/RyanEls4/status/1879978018204184582?ref_src=twsrc%5Etfw">January 16, 2025&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>And we could be. But, we&amp;rsquo;re absolutely not at a moment like this:&lt;/p></summary><content type="html">&lt;p>My experience with AI has been that it augments my abilities. It can consolidate information and automate tedium to make me more productive. For more sophisticated tasks related to programming, AI cannot replace a hardworking and fully engaged engineer.&lt;/p>
&lt;p>Some people might feel like we&amp;rsquo;re at a moment like this:&lt;/p>
&lt;!-- https://x.com/RyanEls4/status/1879978018204184582 -->
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Software developers in the 60s 🤭 &lt;a href="https://t.co/eZZYTmzl0E">pic.twitter.com/eZZYTmzl0E&lt;/a>&lt;/p>&amp;mdash; Ryan Els (@RyanEls4) &lt;a href="https://twitter.com/RyanEls4/status/1879978018204184582?ref_src=twsrc%5Etfw">January 16, 2025&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>And we could be. But, we&amp;rsquo;re absolutely not at a moment like this:&lt;/p>
&lt;!-- https://x.com/amritwt/status/1941460667946713311 -->
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">&amp;quot;ok claude, make a billion dollar b2b todo app. make no mistakes.&amp;quot; &lt;a href="https://t.co/mPE0gPFgac">pic.twitter.com/mPE0gPFgac&lt;/a>&lt;/p>&amp;mdash; amrit (@amritwt) &lt;a href="https://twitter.com/amritwt/status/1941460667946713311?ref_src=twsrc%5Etfw">July 5, 2025&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Then, there&amp;rsquo;s this:&lt;/p>
&lt;!-- https://x.com/paulg/status/1953289830982664236 -->
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">I met a founder today who said he writes 10,000 lines of code a day now thanks to AI. This is probably the limit case. He&amp;#39;s a hotshot programmer, he knows AI tools very well, and he&amp;#39;s talking about a 12 hour day. But he&amp;#39;s not naive. This is not 10,000 lines of bug-filled crap.&lt;/p>&amp;mdash; Paul Graham (@paulg) &lt;a href="https://twitter.com/paulg/status/1953289830982664236?ref_src=twsrc%5Etfw">August 7, 2025&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Who in this scenario is actually confirming that it&amp;rsquo;s not 10k lines of slop?&lt;/p>
&lt;p>I&amp;rsquo;ve seen software engineers sometimes get defensive on the topic of AI, because they are perturbed by these sorts of unrealistic soundbites. Similar melodramatic sentiments are rampant on LinkedIn. I&amp;rsquo;ve been grateful to work with other engineers that have a strong interest in productivity and are level-headed about AI.&lt;/p>
&lt;p>The reality is somewhere between the extremes. AI isn&amp;rsquo;t replacing engineers, but it&amp;rsquo;s also not just a fancy autocomplete. When used thoughtfully, it can genuinely accelerate development workflows by taking on specific, well-defined roles in the programming process.&lt;/p>
&lt;a
href="https://github.com/brettinternet/ai"
target="_blank"
rel="noopener noreferrer"
class="group not-prose no-underline transition-all duration-200 translate-y-0 hover:-translate-y-[2px] group block overflow-hidden relative shadow-md hover:shadow-xl rounded-md border-solid border border-gray-300 bg-slate-200 h-60 w-full max-w-[422px] mx-auto my-3"
>
&lt;div class="flex flex-col min-h-full p-8">
&lt;div class="flex-1">
&lt;h2 class="leading-tight font-serif text-lg mb-2 font-bold text-slate-900">
brettinternet/ai
&lt;/h2>
&lt;/div>
&lt;p class="font-sans text-slate-500">AI tools, research &amp;amp; playground&lt;/p>
&lt;div class="absolute top-0 right-0 m-3 text-slate-500">
&lt;svg
class="w-4 h-4"
xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
stroke="currentColor">
&lt;path stroke-linecap="round" stroke-linejoin="round"
d="M13.5 6H5.25A2.25 2.25 0 003 8.25v10.5A2.25 2.25 0 005.25 21h10.5A2.25 2.25 0 0018 18.75V10.5m-10.5 6L21 3m0 0h-5.25M21 3v5.25" />
&lt;/svg>
&lt;/div>
&lt;/div>
&lt;/a>
&lt;h2 id="usage">Usage&lt;/h2>
&lt;p>In my currently evolving workflows, AI fulfills a few very specific pair programming roles to augment my work:&lt;/p>
&lt;ol>
&lt;li>Code completions&lt;/li>
&lt;li>Discovery&lt;/li>
&lt;li>Surgical updates&lt;/li>
&lt;li>Iterative edit-test loops&lt;/li>
&lt;/ol>
&lt;p>There are MCP servers that assist with most of these roles. I have &lt;a href="https://github.com/brettinternet/mcp">some I&amp;rsquo;m working on&lt;/a> and &lt;a href="https://github.com/brettinternet/ai">a few I use&lt;/a> regularly.&lt;/p>
&lt;h3 id="1-code-completions">1. Code completions&lt;/h3>
&lt;p>This is the most obvious pair programming application for AI.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./vscode-typo.gif" alt="predictive text and typo fix" />
&lt;figcaption>Copilot code completions&lt;/figcaption>
&lt;/figure>
&lt;p>These are extremely context-aware changes and combat small-scale tedium.&lt;/p>
&lt;h3 id="2-discovery">2. Discovery&lt;/h3>
&lt;p>Discovery is my favorite usecase for AI. I use it for researching topics, summarizing documentation, querying libraries and codebases, getting usage examples, and planning implementation approaches. This is where AI shines as a research assistant that can quickly traverse large amounts of information.&lt;/p>
&lt;p>For codebase exploration, AI excels at answering questions like &amp;ldquo;What are the side effects of this module?&amp;rdquo; or &amp;ldquo;Show me all the places where authentication is handled.&amp;rdquo; I frequently use this to understand hotspots in code and trace dependencies before making changes.&lt;/p>
&lt;p>Well-structured codebases with clear boundaries are easier for both humans and AI to navigate. When I refactored a large codebase using &lt;a href="/boundary">Context Boundaries&lt;/a> for team scalability, it also improved AI&amp;rsquo;s ability to provide focused, relevant insights by confining context to specific code subdivisions.&lt;/p>
&lt;p>This raises an important design question as we integrate AI into development workflows:&lt;/p>
&lt;blockquote>
&lt;p>How can we improve code organization for both human and AI readability?&lt;/p>&lt;/blockquote>
&lt;p>The answer benefits onboarding, knowledge transfer, and debugging regardless of whether you&amp;rsquo;re working with human teammates or AI assistants.&lt;/p>
&lt;h3 id="3-surgical-updates">3. Surgical updates&lt;/h3>
&lt;p>AI can accomplish more sophisticated tasks when it&amp;rsquo;s steered towards a very specific context. I have a coworker that calls these &amp;ldquo;surgical updates&amp;rdquo;. This is where you pave a precise path for the agent to make specific changes. You might build up a context from a discovery or planning stage with an agent. In large enterprise codebases, this is how you manage context.&lt;/p>
&lt;!-- https://x.com/vasumanmoza/status/1926487201463832863 -->
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">Claude 4 just refactored my entire codebase in one call.&lt;br>&lt;br>25 tool invocations. 3,000+ new lines. 12 brand new files.&lt;br>&lt;br>It modularized everything. Broke up monoliths. Cleaned up spaghetti.&lt;br>&lt;br>None of it worked.&lt;br>But boy was it beautiful. &lt;a href="https://t.co/wvmzh7IeAP">pic.twitter.com/wvmzh7IeAP&lt;/a>&lt;/p>&amp;mdash; vas (@vasumanmoza) &lt;a href="https://twitter.com/vasumanmoza/status/1926487201463832863?ref_src=twsrc%5Etfw">May 25, 2025&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>Writing code is rarely the bottleneck. The real challenges in software development are understanding requirements, designing systems, debugging complex interactions, and making architectural decisions. Even with AI assistance, these cognitive tasks require human judgment, domain expertise, and the ability to reason about trade-offs. AI can help you write code faster, but it can&amp;rsquo;t replace the critical thinking needed to determine what code should be written in the first place.&lt;/p>
&lt;p>Claude code is closed-source but after some inspection you&amp;rsquo;ll find it ships with a few vendor distributions: (a) JetBrains extension, (b) VSCode extension, and (c) ripgrep.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./claude-vendor.png" alt="claude distribution with vendor directory" />
&lt;figcaption>@anthropic/claude-code&lt;/figcaption>
&lt;/figure>
&lt;p>&lt;a href="https://github.com/BurntSushi/ripgrep/">Ripgrep&lt;/a> is a CLI tool for finding filenames and text in files with regex. A major differentiator between agents right now is how well they &lt;em>find&lt;/em> relevant information and fill their context with precisely what&amp;rsquo;s needed.&lt;/p>
&lt;h3 id="4-iterative-edit-test-loops">4. Iterative Edit-Test Loops&lt;/h3>
&lt;pre class="mermaid">
flowchart LR
A[🤖 Code] --&amp;gt; B[🧪 Test]
B --&amp;gt; C[🔧 Fix]
C --&amp;gt; A
B --&amp;gt; D[✅ Done]
style A fill:#1e3a8a,stroke:#3b82f6,stroke-width:2px,color:#ffffff
style B fill:#92400e,stroke:#f59e0b,stroke-width:2px,color:#ffffff
style C fill:#991b1b,stroke:#ef4444,stroke-width:2px,color:#ffffff
style D fill:#065f46,stroke:#10b981,stroke-width:2px,color:#ffffff
&lt;/pre>
&lt;p>AI agents are excellent at small tasks where they can iteratively loop through problems that provide immediate feedback. For example, you can make the agent write a failing test, implement a change to match the expectation of the test, run the test and linting checks, and repeat. Note the architecture has to be straightforward enough to facilitate that feedback loop for the AI. This is becoming easier with additional tooling, such as validating UI changes with the &lt;a href="https://github.com/microsoft/playwright-mcp">Playwright MCP&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve seen Claude delete or add &lt;code>@tag :skip&lt;/code> for tests in order to get them to &amp;ldquo;pass&amp;rdquo;. Engineers have to be hands-on conductors. However, AI agents are excellent at setting up tests and other boilerplate and iterative test-driven development–just be sure to review that the coverage is meaningful.&lt;/p>
&lt;h2 id="best-practice">Best Practice&lt;/h2>
&lt;h3 id="workflow">Workflow&lt;/h3>
&lt;p>Using an AI agent for development looks unique for different tasks. Let me lay out a very general workflow with agentic prompting and some ideas to guide our approach.&lt;/p>
&lt;ol>
&lt;li>Create worktree as a sibling folder to &lt;code>work/repo-name&lt;/code> to parallelize working on a repository&lt;/li>
&lt;li>Use Linear MCP to examine specifications of a ticket&lt;/li>
&lt;li>Investigate the work in parallel with the agent in main worktree, ask the agent for an execution plan and then analyze the plan&lt;/li>
&lt;li>Run a first pass on the work and write tests for our expectations (or inverse order)&lt;/li>
&lt;li>Review the work, refactor or fill in the gaps&lt;/li>
&lt;/ol>
&lt;h3 id="caution">Caution&lt;/h3>
&lt;p>You&amp;rsquo;ll discover within the first few minutes of using Claude that it &lt;a href="https://github.com/anthropics/claude-code/issues/3382">consistently responds&lt;/a> with this praise:&lt;/p>
&lt;blockquote>
&lt;p>You&amp;rsquo;re absolutely right!&lt;/p>&lt;/blockquote>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./glazing.png" alt="ChatGPT: Dude. You just said something deep as hell without even flinching. You're 1000% right." />
&lt;figcaption>Glazing is bad&lt;/figcaption>
&lt;/figure>
&lt;p>There was a GPT 4o update a few months ago where OpenAI released a personality update that was intensely sycophantic and mirrored user language. &lt;a href="https://www.reddit.com/r/ChatGPT/comments/1mkae1l/gpt5_ama_with_openais_sam_altman_and_some_of_the/">OpenAI&amp;rsquo;s AMA&lt;/a> for the GPT5 release had users begging for the return of the 4o user engagement maximizer because it was &amp;ldquo;friendly&amp;rdquo;.&lt;/p>
&lt;p>We need self-awareness about what using AI does to our psychology and good reviewing practices to avoid problematic code getting onto &lt;code>main&lt;/code>.&lt;/p>
&lt;!-- https://x.com/Steve8708/status/1856896071433424982 -->
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">wait what &lt;a href="https://t.co/4CKClCEzvH">pic.twitter.com/4CKClCEzvH&lt;/a>&lt;/p>&amp;mdash; Steve (Builder.io) (@Steve8708) &lt;a href="https://twitter.com/Steve8708/status/1856896071433424982?ref_src=twsrc%5Etfw">November 14, 2024&lt;/a>&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>I noticed a coworker published a PR for review that had invalid code and the engineer blamed it on AI.
People are accountable for code. AI can&amp;rsquo;t be accountable.&lt;/p>
&lt;p>There doesn&amp;rsquo;t need to be a major paradigm shift with best practice. We should still maintain all existing practices for code maintainability whether it&amp;rsquo;s generated by AI or written by humans. For example, of course we should be concerned about what code AI writes. The same is true when we select libraries or languages without AI. In both cases we own the decision and the code. Age old best practice continue even with modern AI technology.&lt;/p>
&lt;h2 id="open-questions">Open Questions&lt;/h2>
&lt;p>As LLMs and the tooling evolves, so do my workflows. I&amp;rsquo;m continuing to learn and grow with these changes. My &lt;a href="https://github.com/brettinternet/ai">AI repo&lt;/a> is where I play with these tools and figure out how to apply them to other projects.&lt;/p>
&lt;p>Can engineers become excessively reliant on agentic prompting? Will this change engineering culture? What will this mean especially for newer programmers in the field?&lt;/p>
&lt;p>Will LLM innovation will begin to plateau? I wonder if we&amp;rsquo;re nearing a point where throwing more compute or a longer chain of thought won&amp;rsquo;t yield additional gains in performance.&lt;/p>
&lt;p>Are Anthropic and OpenAI subsidizing access to their models and will prices skyrocket soon? GPT5 appears to have been a cost-saving exercise for several reasons.&lt;/p>
&lt;p>For now, AI can augment software engineering in meaningful ways and I encourage every software engineer to discover what LLMs can do for your workflows.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>AI isn&amp;rsquo;t going to replace thoughtful engineering, but it can make thoughtful engineers more effective. The key is approaching it as a sophisticated tool that excels in specific contexts such as code completion, research and discovery, focused updates, and iterative problem-solving. As the technology evolves, so should our practices for integrating it responsibly into development workflows.&lt;/p>
&lt;hr>
&lt;p>This post was adapted from a &lt;a href="https://brett.cloud/slides/ai/">lightning talk&lt;/a> I gave to a group of executives.&lt;/p></content></entry><entry><title>Scaling Elixir Applications with Context Boundaries</title><link rel="alternate" href="https://brett.cloud/boundary/"/><id>https://brett.cloud/boundary/</id><published>2025-08-07T00:00:00+0000</published><updated>2025-08-07T00:00:00+0000</updated><summary>&lt;p>Building large-scale Elixir applications presents unique challenges. As codebases grow beyond the initial team of 3-5 developers, the lack of enforced architectural boundaries becomes a significant bottleneck. Teams spend more time reading and understanding code than writing new features, and the dynamic nature of Elixir makes code navigation increasingly difficult without proper structure.&lt;/p>
&lt;p>Lately I&amp;rsquo;ve been exploring how context boundaries, enforced by compile-time checks, can transform unwieldy monoliths into well-organized, maintainable applications that can scale to teams of 20+ engineers.&lt;/p></summary><content type="html">&lt;p>Building large-scale Elixir applications presents unique challenges. As codebases grow beyond the initial team of 3-5 developers, the lack of enforced architectural boundaries becomes a significant bottleneck. Teams spend more time reading and understanding code than writing new features, and the dynamic nature of Elixir makes code navigation increasingly difficult without proper structure.&lt;/p>
&lt;p>Lately I&amp;rsquo;ve been exploring how context boundaries, enforced by compile-time checks, can transform unwieldy monoliths into well-organized, maintainable applications that can scale to teams of 20+ engineers.&lt;/p>
&lt;h2 id="the-scaling-problem">The Scaling Problem&lt;/h2>
&lt;h3 id="why-large-elixir-codebases-become-unwieldy">Why Large Elixir Codebases Become Unwieldy&lt;/h3>
&lt;p>When Elixir applications start small, the flexibility of the language is a tremendous asset. You can quickly prototype features, leverage pattern matching, and build robust systems with relatively few lines of code. However, as applications grow, several problems emerge:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Lack of Enforced Structure&lt;/strong>: Phoenix contexts provide organizational guidance, but there&amp;rsquo;s no compile-time enforcement preventing modules from calling deep into other contexts&amp;rsquo; internals. An organization module might directly access user database schemas, creating tight coupling that makes refactoring dangerous.&lt;/li>
&lt;li>&lt;strong>Inconsistent Organization Patterns&lt;/strong>: Different teams or developers organize code differently. Some put business logic in controllers, others in contexts, and still others in custom service modules. These inconsistencies cause immense mental overhead for teams I&amp;rsquo;ve been on.&lt;/li>
&lt;li>&lt;strong>Circular Dependencies&lt;/strong>: Without boundaries, it&amp;rsquo;s easy to create circular dependencies that slow compilation times in Elixir and make the code harder to reason about. Module A calls Module B, which calls Module C, which calls Module A. This creates a tangled web and slow CI.&lt;/li>
&lt;li>&lt;strong>Testing Complexity&lt;/strong>: When modules are tightly coupled, testing becomes complex. You end up testing through the web API layer because it&amp;rsquo;s the only stable interface, leading to slow, brittle tests.&lt;/li>
&lt;/ol>
&lt;h3 id="reading-vs-writing-code">Reading vs. Writing Code&lt;/h3>
&lt;p>In mature applications or when onboarding in a new team, I find myself spending more time reading code than writing it. This ratio becomes problematic when functions are scattered across the codebase with no clear ownership and business logic is mixed with infrastructure concerns.&lt;/p>
&lt;p>One approach to dealing with readability is to address organizational patterns for code, such as well-defined and enforceable &amp;ldquo;boundaries&amp;rdquo;.&lt;/p>
&lt;h2 id="the-boundary-library">The Boundary Library&lt;/h2>
&lt;p>&lt;a href="https://github.com/sasa1977/boundary">Boundary&lt;/a> by Saša Jurić provides compile-time warnings of architectural boundaries in Elixir applications. It transforms organizational guidelines into compiler checks, catching boundary violations before they reach production.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>mix clean &lt;span style="color:#f92672">&amp;amp;&amp;amp;&lt;/span> &lt;span style="color:#ae81ff">\ &lt;/span> &lt;span style="color:#75715e"># Cleaning prevents false positives&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> mix compile --warnings-as-errors&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># count boundary errors&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>mix compile | grep -E &lt;span style="color:#e6db74">&amp;#39;warning:.*(boundary|forbidden reference)&amp;#39;&lt;/span> | wc -l&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h3 id="how-boundary-works">How Boundary Works&lt;/h3>
&lt;p>The library operates through registering module attributes that define named groups of modules called boundaries. These boundaries can export inner modules from within a boundary and make them publicly accessible. Boundaries have dependencies from other boundary exports.&lt;/p>
&lt;p>Here&amp;rsquo;s a simple example:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> This boundary can use MyApp.Users
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> and exports Products and Categories modules
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">Boundary&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">deps&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Users&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">exports&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Products&lt;/span>, &lt;span style="color:#75715e"># MyApp.Catalog.Products&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Categories&lt;/span>, &lt;span style="color:#75715e"># MyApp.Catalog.Categories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;This module is exported and can be used by other boundaries&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Internal.PriceCalculator&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;This module is internal and cannot be used outside the boundary&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>If module functions in another boundary try to call &lt;code>MyApp.Catalog.Internal.PriceCalculator&lt;/code>, the compiler will raise an error.&lt;/p>
&lt;h3 id="setting-up-boundary">Setting Up Boundary&lt;/h3>
&lt;p>Add &lt;a href="https://hexdocs.pm/boundary/Boundary.html">Boundary&lt;/a> to your &lt;code>mix.exs&lt;/code>:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defp&lt;/span> deps &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:boundary&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;~&amp;gt; 0.10&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">runtime&lt;/span>: &lt;span style="color:#66d9ef">false&lt;/span>},
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The &lt;code>runtime: false&lt;/code> option is important. Boundary is a compile-time tool and doesn&amp;rsquo;t need to be included in your production release.&lt;/p>
&lt;h2 id="context-boundaries">Context Boundaries&lt;/h2>
&lt;p>On my Elixir team, we&amp;rsquo;ve extended the ideas from the Boundary library into an opinionated design pattern we call &amp;ldquo;Context Boundaries&amp;rdquo;.&lt;/p>
&lt;h3 id="what-are-context-boundaries">What Are Context Boundaries?&lt;/h3>
&lt;p>Context boundaries are architectural constraints that group related functionality together and define explicit interfaces for interaction between different parts of your application. Think of them as microservices within a monolith. Each boundary owns a specific business domain and exposes a well-defined API.&lt;/p>
&lt;p>In an e-commerce application, you might have top-level boundaries like:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>lib/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>└── my_app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ billing/ &lt;span style="color:#75715e"># Payment processing, invoicing, subscriptions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ catalog/ &lt;span style="color:#75715e"># Product management, categories, pricing&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ orders/ &lt;span style="color:#75715e"># Order processing, fulfillment, tracking &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ users/ &lt;span style="color:#75715e"># Authentication, authorization, user profiles&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ billing.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ catalog.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ├─ orders.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> └─ users.ex&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Each boundary would have its own schemas, business logic, and database concerns, but could only interact with other boundaries through their public interfaces defined in the outer context file.&lt;/p>
&lt;p>In larger organizations, boundaries naturally form around teams and interfaces would likely be used by other teams, so design them thoughtfully.&lt;/p>
&lt;h3 id="benefits-of-context-boundaries">Benefits of Context Boundaries&lt;/h3>
&lt;ol>
&lt;li>&lt;strong>Reduced Cognitive Load&lt;/strong>: Developers working on the catalog system don&amp;rsquo;t need to understand the intricacies of billing logic. They just need to know the public API. They should also spend less time figuring out where code lives.&lt;/li>
&lt;li>&lt;strong>Parallel Development&lt;/strong>: Teams can shape themselves around business domains and can work independently on different boundaries without merge conflicts.&lt;/li>
&lt;li>&lt;strong>Clearer Testing Strategy&lt;/strong>: Each boundary can be thoroughly tested in isolation, with integration tests covering the interactions between boundaries.&lt;/li>
&lt;li>&lt;strong>Future Microservice Extraction&lt;/strong>: If you ever need to split off pieces of your monolith, boundaries provide natural seams for extraction.&lt;/li>
&lt;li>&lt;strong>Documentation&lt;/strong>: The boundary definitions serve as living documentation of your system&amp;rsquo;s architecture. Boundaries are also good places to define actual documentation within a more narrow context for both humans and LLMs (e.g. &lt;code>CLAUDE.md&lt;/code>).&lt;/li>
&lt;li>&lt;strong>Improved Discoverability&lt;/strong>: Public interfaces make it clear what operations are available and how to use them.&lt;/li>
&lt;li>&lt;strong>Performance&lt;/strong>: Boundaries should reduce compilation time by eliminating circular dependencies. Boundary checks happen at compile time, not runtime, so there&amp;rsquo;s no performance impact in production.&lt;/li>
&lt;/ol>
&lt;p>An honest implementation of context boundaries should turn spaghetti code into a well-organized tree with each domain branching out in a visually traceable call stack.&lt;/p>
&lt;h2 id="implementing-context-boundaries">Implementing Context Boundaries&lt;/h2>
&lt;p>There are some additional steps to take to maximize boundaries for larger organizations.&lt;/p>
&lt;h3 id="directory-structure">Directory Structure&lt;/h3>
&lt;details open>
&lt;summary>A well-organized boundary-based application follows a consistent directory structure.&lt;/summary>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>lib/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> my_app/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> catalog/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> products/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> product.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list_products.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create_product.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> update_product.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> categories/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> category.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> list_categories.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> utils/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> price_calculator.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> catalog.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> orders/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order_processing/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> order.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> line_item.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> create_order.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> process_payment.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> fulfillment/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ship_order.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> track_shipment.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> orders.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> authentication/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> login.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> register.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> profiles/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schemas/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> user.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> actions/
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> update_profile.ex
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> users.ex&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;/details>
&lt;h3 id="context-interface-design">Context Interface Design&lt;/h3>
&lt;p>Each context exposes a clean public interface through its main module. Here&amp;rsquo;s how you might structure the &lt;code>Catalog&lt;/code> context:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Context for managing product catalog.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Handles products, categories, pricing, and inventory.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Actions.ListProducts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Actions.GetProduct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Actions.CreateProduct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Actions.UpdateProduct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Categories.Actions.ListCategories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Categories.Actions.CreateCategory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">Boundary&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">deps&lt;/span>: [&lt;span style="color:#a6e22e">MyApp.Users&lt;/span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">exports&lt;/span>: [&lt;span style="color:#a6e22e">Products.Schemas.Product&lt;/span>, &lt;span style="color:#a6e22e">Categories.Schemas.Category&lt;/span>]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Actions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Categories.Actions&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#a6e22e">CategoryActions&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Product operations&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">Actions.ListProducts&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defdelegate&lt;/span> list_products(params \\ []), &lt;span style="color:#e6db74">to&lt;/span>: &lt;span style="color:#a6e22e">Actions.ListProducts&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#e6db74">:list_products&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">Actions.GetProduct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defdelegate&lt;/span> get_product(id), &lt;span style="color:#e6db74">to&lt;/span>: &lt;span style="color:#a6e22e">Actions.GetProduct&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#e6db74">:get_product&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">Actions.CreateProduct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defdelegate&lt;/span> create_product(attrs), &lt;span style="color:#e6db74">to&lt;/span>: &lt;span style="color:#a6e22e">Actions.CreateProduct&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#e6db74">:create_product&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">Actions.UpdateProduct&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defdelegate&lt;/span> update_product(product, attrs), &lt;span style="color:#e6db74">to&lt;/span>: &lt;span style="color:#a6e22e">Actions.UpdateProduct&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#e6db74">:update_product&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Category operations &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">Actions.ListCategories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defdelegate&lt;/span> list_categories(), &lt;span style="color:#e6db74">to&lt;/span>: &lt;span style="color:#a6e22e">CategoryActions.ListCategories&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#e6db74">:list_categories&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@impl&lt;/span> &lt;span style="color:#a6e22e">Actions.CreateCategory&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defdelegate&lt;/span> create_category(attrs), &lt;span style="color:#e6db74">to&lt;/span>: &lt;span style="color:#a6e22e">CategoryActions.CreateCategory&lt;/span>, &lt;span style="color:#e6db74">as&lt;/span>: &lt;span style="color:#e6db74">:create_category&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>This interface provides several benefits:&lt;/p>
&lt;ol>
&lt;li>&lt;strong>Discoverability&lt;/strong>: All public operations are visible in one place&lt;/li>
&lt;li>&lt;strong>Delegation&lt;/strong>: Implementation details are hidden in specialized modules&lt;/li>
&lt;li>&lt;strong>Consistency&lt;/strong>: All contexts follow the same interface pattern&lt;/li>
&lt;li>&lt;strong>Type Safety&lt;/strong>: You can use behaviors to ensure implementations match &lt;code>@callback&lt;/code> interfaces&lt;/li>
&lt;li>&lt;strong>Mockable&lt;/strong>: Behaviour definitions make each action easily mocked&lt;/li>
&lt;/ol>
&lt;h3 id="action-modules">Action Modules&lt;/h3>
&lt;p>Action modules contain the actual business logic and should follow a consistent pattern. They expose and implement a callback for their interface. At the org I work at now, we generally have one file contain only one action so that an action has one public function but can have unlimited private functions.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Actions.CreateProduct&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> __MODULE__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Schemas.Product&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Users&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Repo&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@type&lt;/span> params_t &lt;span style="color:#f92672">::&lt;/span> %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">name&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">description&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">price&lt;/span>: &lt;span style="color:#a6e22e">Decimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">category_id&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">created_by&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@type&lt;/span> result_t &lt;span style="color:#f92672">::&lt;/span> {&lt;span style="color:#e6db74">:ok&lt;/span>, &lt;span style="color:#a6e22e">Product&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()} &lt;span style="color:#f92672">|&lt;/span> {&lt;span style="color:#e6db74">:error&lt;/span>, &lt;span style="color:#a6e22e">Ecto.Changeset&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@doc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Creates a new product.
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@callback&lt;/span> create_product(params_t()) &lt;span style="color:#f92672">::&lt;/span> result_t()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> create_product(params) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with {&lt;span style="color:#e6db74">:ok&lt;/span>, user} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">Users&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get_user(params&lt;span style="color:#f92672">.&lt;/span>created_by),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> validate_permissions(user),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, product} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> create_product(params) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, product}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defp&lt;/span> validate_permissions(user) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">Users&lt;/span>&lt;span style="color:#f92672">.&lt;/span>has_permission?(user, &lt;span style="color:#e6db74">:create_products&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">:ok&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:error&lt;/span>, &lt;span style="color:#e6db74">:unauthorized&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defp&lt;/span> create_product(params) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> %&lt;span style="color:#a6e22e">Product&lt;/span>{}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Product&lt;/span>&lt;span style="color:#f92672">.&lt;/span>changeset(params)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">Repo&lt;/span>&lt;span style="color:#f92672">.&lt;/span>insert()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>The &lt;code>@behaviour __MODULE__&lt;/code> is a self-referencing behavior that replaces &lt;code>@spec&lt;/code> with &lt;code>@callback&lt;/code> to provide compile-time documentation of our action functions in our context API. Each action module is now a swappable backend that can be easily mocked in tests or refactored.&lt;/p>
&lt;p>Key principles for action modules that we&amp;rsquo;ve implemented with our large Elixir monolith:&lt;/p>
&lt;ul>
&lt;li>&lt;strong>Single Responsibility&lt;/strong>: One action per module with self-referencing behavior&lt;/li>
&lt;li>&lt;strong>Public/Private Separation&lt;/strong>: One public function that matches the module name (a uniform function name such as &lt;code>call&lt;/code> might also be appropriate) alongside private helpers&lt;/li>
&lt;li>&lt;strong>Type Specifications&lt;/strong>: Clear input/output types with &lt;code>@callback&lt;/code> specification defining the contract of the action&amp;rsquo;s behaviour&lt;/li>
&lt;li>&lt;strong>Error Handling&lt;/strong>: Consistent error patterns across actions that mask errors which could be useless outside the context&lt;/li>
&lt;/ul>
&lt;h3 id="schema-organization">Schema Organization&lt;/h3>
&lt;p>Schemas should be pure data definitions with minimal logic and only pure functions:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Schemas.Product&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">Ecto.Schema&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">import&lt;/span> &lt;span style="color:#a6e22e">Ecto.Changeset&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@type&lt;/span> t &lt;span style="color:#f92672">::&lt;/span> &lt;span style="color:#960050;background-color:#1e0010">%&lt;/span>__MODULE__{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">id&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">name&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">description&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">price&lt;/span>: &lt;span style="color:#a6e22e">Decimal&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">category_id&lt;/span>: &lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">inserted_at&lt;/span>: &lt;span style="color:#a6e22e">DateTime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t(),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">updated_at&lt;/span>: &lt;span style="color:#a6e22e">DateTime&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> schema &lt;span style="color:#e6db74">&amp;#34;products&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field &lt;span style="color:#e6db74">:name&lt;/span>, &lt;span style="color:#e6db74">:string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field &lt;span style="color:#e6db74">:description&lt;/span>, &lt;span style="color:#e6db74">:string&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> field &lt;span style="color:#e6db74">:price&lt;/span>, &lt;span style="color:#e6db74">:decimal&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> belongs_to &lt;span style="color:#e6db74">:category&lt;/span>, &lt;span style="color:#a6e22e">MyApp.Catalog.Categories.Schemas.Category&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> timestamps()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> changeset(product, attrs) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> product
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> cast(attrs, [&lt;span style="color:#e6db74">:name&lt;/span>, &lt;span style="color:#e6db74">:description&lt;/span>, &lt;span style="color:#e6db74">:price&lt;/span>, &lt;span style="color:#e6db74">:category_id&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> validate_required([&lt;span style="color:#e6db74">:name&lt;/span>, &lt;span style="color:#e6db74">:price&lt;/span>, &lt;span style="color:#e6db74">:category_id&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> validate_number(&lt;span style="color:#e6db74">:price&lt;/span>, &lt;span style="color:#e6db74">greater_than&lt;/span>: &lt;span style="color:#ae81ff">0&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">|&amp;gt;&lt;/span> foreign_key_constraint(&lt;span style="color:#e6db74">:category_id&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Schemas are typically exported by boundaries since they&amp;rsquo;re part of the public interface. Other contexts will likely need to pattern match on them and pass them around. You may want to bulk export schemas in an inner boundary.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># lib/my_app/catalog/products/schemas.ex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog.Products.Schemas&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> Product schemas boundary
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">use&lt;/span> &lt;span style="color:#a6e22e">Boundary&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">deps&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Catalog.Categories.Schemas&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">exports&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Product&lt;/span> &lt;span style="color:#75715e"># Ecto schema definition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>This is one example of how boundaries interface with each other.&lt;/p>
&lt;h2 id="cross-boundary-communication">Cross-Boundary Communication&lt;/h2>
&lt;h3 id="synchronous-communication">Synchronous Communication&lt;/h3>
&lt;p>For synchronous operations where you need immediate results, call through the boundary&amp;rsquo;s public interface:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Orders.Actions.CreateOrder&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> __MODULE__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Catalog&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Orders.Schemas.Order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Users&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@callback&lt;/span> create_order(map()) &lt;span style="color:#f92672">::&lt;/span> {&lt;span style="color:#e6db74">:ok&lt;/span>, &lt;span style="color:#a6e22e">Order&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()} &lt;span style="color:#f92672">|&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> create_order(params) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with {&lt;span style="color:#e6db74">:ok&lt;/span>, user} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">Users&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get_user(params&lt;span style="color:#f92672">.&lt;/span>user_id),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, products} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> validate_products(params&lt;span style="color:#f92672">.&lt;/span>line_items),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, order} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> create_order(user, products, params) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, order}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">defp&lt;/span> validate_products(line_items) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> product_ids &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">Enum&lt;/span>&lt;span style="color:#f92672">.&lt;/span>map(line_items, &lt;span style="color:#f92672">&amp;amp;&lt;/span> &amp;amp;1&lt;span style="color:#f92672">.&lt;/span>product_id)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Call through Catalog boundary interface&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">Catalog&lt;/span>&lt;span style="color:#f92672">.&lt;/span>get_products_by_ids(product_ids) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, products} &lt;span style="color:#f92672">when&lt;/span> length(products) &lt;span style="color:#f92672">==&lt;/span> length(product_ids) &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, products}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> _ &lt;span style="color:#f92672">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:error&lt;/span>, &lt;span style="color:#e6db74">:invalid_products&lt;/span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h3 id="asynchronous-communication">Asynchronous Communication&lt;/h3>
&lt;p>For side effects that don&amp;rsquo;t need immediate consistency, use event-driven communication:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">defmodule&lt;/span> &lt;span style="color:#a6e22e">MyApp.Orders.Actions.CompleteOrder&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@moduledoc&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@behaviour&lt;/span> __MODULE__
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.EventBus&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">alias&lt;/span> &lt;span style="color:#a6e22e">MyApp.Orders.Schemas.Order&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">@type&lt;/span> complete_order(&lt;span style="color:#a6e22e">String&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()) &lt;span style="color:#f92672">::&lt;/span> {&lt;span style="color:#e6db74">:ok&lt;/span>, &lt;span style="color:#a6e22e">Order&lt;/span>&lt;span style="color:#f92672">.&lt;/span>t()}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">def&lt;/span> complete_order(order_id) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> with {&lt;span style="color:#e6db74">:ok&lt;/span>, order} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> get_order(order_id),
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, updated_order} &lt;span style="color:#f92672">&amp;lt;-&lt;/span> mark_completed(order) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e"># Publish event for other contexts to react&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Phoenix.PubSub&lt;/span>&lt;span style="color:#f92672">.&lt;/span>broadcast(&lt;span style="color:#a6e22e">MyApp.PubSub&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;order_completed:&lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>updated_order&lt;span style="color:#f92672">.&lt;/span>user_id&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>, %{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">order_id&lt;/span>: updated_order&lt;span style="color:#f92672">.&lt;/span>id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">user_id&lt;/span>: updated_order&lt;span style="color:#f92672">.&lt;/span>user_id,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">total&lt;/span>: updated_order&lt;span style="color:#f92672">.&lt;/span>total
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> {&lt;span style="color:#e6db74">:ok&lt;/span>, updated_order}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h2 id="web-layer-organization">Web Layer Organization&lt;/h2>
&lt;p>The web layer should also define its own boundary in &lt;code>my_app_web.ex&lt;/code>.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">deps&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Absinthe.Subscription&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Absinthe&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Billing&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Catalog&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Orders&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Users&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Phoenix&lt;/span>,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>],
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">exports&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Endpoint&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Keep controllers or resolvers thin. For example, a GraphQL endpoint&amp;rsquo;s resolver should only handle request-specific concerns. Similarly, controllers should delegate business logic to contexts.&lt;/p>
&lt;h2 id="challenges">Challenges&lt;/h2>
&lt;p>There are a few non-trivial challenges we encountered at our org with our implementation. The initial refactor was significant overhead since moving files around and function calls was so wide-spread. We were all hands on deck for a few weeks to make this work. Following our initial refactor, continuing education and discipline became a priority for us.&lt;/p>
&lt;p>Database queries that span boundaries become more complex and may require boundary coupling, duplication or event-driven updates. We&amp;rsquo;ve elected to use a controlled coupling approach for interdependent schemas and joins. Each domain has a dedicated schemas module that acts as a child boundary that exports all of its schemas.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># lib/my_app/orders/order_processing/schemas.ex&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">exports&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">Order&lt;/span>, &lt;span style="color:#75715e"># Ecto schema definition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">LineItem&lt;/span> &lt;span style="color:#75715e"># Ecto schema definition&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> ]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-elixir" data-lang="elixir">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#e6db74">deps&lt;/span>: [
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">MyApp.Orders.OrderProcessing.Schemas&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>]&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>We may eventually have to decouple some domains that need to become their own microservices. This needs to be balanced against architectural benefits.&lt;/p>
&lt;h2 id="conclusion">Conclusion&lt;/h2>
&lt;p>The dynamic nature and loose conventions of Elixir makes it challenging to navigate large codebases. Context boundaries enforced through the Boundary library provide a practical path for scaling Elixir applications beyond small teams.&lt;/p>
&lt;p>Whether you&amp;rsquo;re currently feeling the pain of a growing monolith or planning for future scale, context boundaries offer a pragmatic solution that preserves the benefits of monolithic deployment while providing the organizational clarity of business domains and microservices.&lt;/p></content></entry><entry><title>Appresize</title><link rel="alternate" href="https://brett.cloud/appresize/"/><id>https://brett.cloud/appresize/</id><published>2025-07-25T00:00:00+0000</published><updated>2025-07-25T00:00:00+0000</updated><summary>&lt;div class="flex justify-center">
&lt;img width="128" src="./icon.png" alt="resize" class="my-3" />
&lt;/div>
&lt;h1 align="center">Appresize&lt;/h1>
&lt;p>&lt;a href="https://github.com/brettinternet/Appresize">Appresize&lt;/a> is a utility to resize and move apps from anywhere on the window with custom modifiers and other preferences.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./demo.gif" alt="move and resize window from anywhere" />
&lt;figcaption>Although not captured by the screen recorder, the cursor does follow window&lt;/figcaption>
&lt;/figure>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./screenshot.png" alt="window preferences" class="border-none" />
&lt;figcaption>Custom modifiers &amp;amp; other behaviors&lt;/figcaption>
&lt;/figure>
&lt;p>One of my favorite abandonware apps on macOS was an old closed-source Objective C application called &lt;a href="https://bahoom.com/hyperdock">Hyperdock&lt;/a> that had a small secondary feature to resize and move windows by a modifier from anywhere on the window.&lt;/p></summary><content type="html">&lt;div class="flex justify-center">
&lt;img width="128" src="./icon.png" alt="resize" class="my-3" />
&lt;/div>
&lt;h1 align="center">Appresize&lt;/h1>
&lt;p>&lt;a href="https://github.com/brettinternet/Appresize">Appresize&lt;/a> is a utility to resize and move apps from anywhere on the window with custom modifiers and other preferences.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./demo.gif" alt="move and resize window from anywhere" />
&lt;figcaption>Although not captured by the screen recorder, the cursor does follow window&lt;/figcaption>
&lt;/figure>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./screenshot.png" alt="window preferences" class="border-none" />
&lt;figcaption>Custom modifiers &amp;amp; other behaviors&lt;/figcaption>
&lt;/figure>
&lt;p>One of my favorite abandonware apps on macOS was an old closed-source Objective C application called &lt;a href="https://bahoom.com/hyperdock">Hyperdock&lt;/a> that had a small secondary feature to resize and move windows by a modifier from anywhere on the window.&lt;/p>
&lt;p>There are various window utilities on Mac, but none of them satisfied my very specific expectation. Now, this demand lives on with Swift in a small utility &lt;a href="https://github.com/brettinternet/Appresize">here&lt;/a>.&lt;/p></content></entry><entry><title>The Stages of ZFS Grief</title><link rel="alternate" href="https://brett.cloud/zfs-passthrough/"/><id>https://brett.cloud/zfs-passthrough/</id><published>2023-12-09T00:00:00+0000</published><updated>2023-12-09T00:00:00+0000</updated><summary>&lt;p>I used a widely-known and inexpensive method to add additional SATA storage via a Host Bus Adapter (HBA). I purchased a &lt;a href="https://www.ebay.com/sch/i.html?_nkw=Dell+Perc+H310+SATA">Dell Perc H310&lt;/a> a long while back. This HBA can be flashed to IT mode to bypass the hardware RAID. &lt;sup>&lt;a href="#flash-instructions">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Since moving my home servers to Proxmox to manage virtualization, I setup disk passthrough to a VM managing my ZFS array. What could go wrong?&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ qm set &lt;span style="color:#ae81ff">100&lt;/span> -scsi1 /dev/disk/by-id/…
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ qm set &lt;span style="color:#ae81ff">100&lt;/span> -scsi2 /dev/disk/by-id/…
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ …&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>I&amp;rsquo;m sure this is fine.&lt;/p></summary><content type="html">&lt;p>I used a widely-known and inexpensive method to add additional SATA storage via a Host Bus Adapter (HBA). I purchased a &lt;a href="https://www.ebay.com/sch/i.html?_nkw=Dell+Perc+H310+SATA">Dell Perc H310&lt;/a> a long while back. This HBA can be flashed to IT mode to bypass the hardware RAID. &lt;sup>&lt;a href="#flash-instructions">1&lt;/a>&lt;/sup>&lt;/p>
&lt;p>Since moving my home servers to Proxmox to manage virtualization, I setup disk passthrough to a VM managing my ZFS array. What could go wrong?&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ qm set &lt;span style="color:#ae81ff">100&lt;/span> -scsi1 /dev/disk/by-id/…
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ qm set &lt;span style="color:#ae81ff">100&lt;/span> -scsi2 /dev/disk/by-id/…
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ …&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>I&amp;rsquo;m sure this is fine.&lt;/p>
&lt;p>&lt;em>Hours later, after a seemingly innocent reboot…&lt;/em>&lt;/p>
&lt;p>On the guest:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no pools available&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h2 id="1-denial">1. Denial&lt;/h2>
&lt;p>On the host:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool list
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no pools available&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Hmm.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cannot import &lt;span style="color:#e6db74">&amp;#39;tank&amp;#39;&lt;/span>: I/O error
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Destroy and re-create the pool from
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a backup source.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Uh oh.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -F tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cannot import &lt;span style="color:#e6db74">&amp;#39;tank&amp;#39;&lt;/span>: one or more devices is currently unavailable&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>This is not good.&lt;/p>
&lt;h2 id="2-anger">2. Anger&lt;/h2>
&lt;p>My restic backups are stale because of some issues with my homelab. 🤦‍♂️&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -N -o readonly&lt;span style="color:#f92672">=&lt;/span>on -f tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cannot import &lt;span style="color:#e6db74">&amp;#39;tank&amp;#39;&lt;/span>: I/O error
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> Destroy and re-create the pool from
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> a backup source.&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;blockquote>
&lt;p>Destroy and re-create the pool from a backup source.&lt;/p>&lt;/blockquote>
&lt;p>At this point, most forums appear to suggest that the pool is lost forever.&lt;/p>
&lt;h2 id="3-bargaining">3. Bargaining&lt;/h2>
&lt;p>Readonly should have worked 🤔&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -N -o readonly&lt;span style="color:#f92672">=&lt;/span>on -f -R tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> pool: tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> id: …
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> state: ONLINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>status: Some supported features are not enabled on the pool.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">(&lt;/span>Note that they may be intentionally disabled &lt;span style="color:#66d9ef">if&lt;/span> the
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#39;compatibility&amp;#39;&lt;/span> property is set.&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> action: The pool can be imported using its name or numeric identifier, though
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> some features will not be available without an explicit &lt;span style="color:#e6db74">&amp;#39;zpool upgrade&amp;#39;&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> config:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> tank ONLINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> raidz2-0 ONLINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> … ONLINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> … ONLINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> … ONLINE
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> … ONLINE&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -F&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Same output as above.&lt;/p>
&lt;p>Online seems good, right?&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool status
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>no pools available&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -F -m tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>cannot import &lt;span style="color:#e6db74">&amp;#39;tank&amp;#39;&lt;/span>: one or more devices is currently unavailable&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Well, here we go. Let&amp;rsquo;s find the txg to use for a rollback.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -FX tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># seemingly hanging for a while…&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>^C^C^C^C&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>That option must not work the way I expected (forgive my impatience, dear reader).&lt;/p>
&lt;h2 id="4-depression">4. Depression&lt;/h2>
&lt;p>At this point I pull down the latest snapshot from Backblaze and assess the damage.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zdb tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>zdb: can&lt;span style="color:#e6db74">&amp;#39;t open &amp;#39;&lt;/span>tank&lt;span style="color:#960050;background-color:#1e0010">&amp;#39;&lt;/span>: No such file or directory
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ZFS_DBGMSG&lt;span style="color:#f92672">(&lt;/span>zdb&lt;span style="color:#f92672">)&lt;/span> START:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ZFS_DBGMSG&lt;span style="color:#f92672">(&lt;/span>zdb&lt;span style="color:#f92672">)&lt;/span> END&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>What have I done to myself.&lt;/p>
&lt;h2 id="5-acceptance">5. Acceptance&lt;/h2>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ restic snapshots
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>repository … opened &lt;span style="color:#f92672">(&lt;/span>version 2, compression level auto&lt;span style="color:#f92672">)&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>ID Time Host Tags Paths
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>--------------------------------------------------------------------------
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>20ee6d7b … restic-remote restic /data&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Deep breath.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ restic restore 20ee6d7b --target ./data&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;h2 id="6-">6. ?&lt;/h2>
&lt;p>Ok, wait a minute. Let&amp;rsquo;s try that mysterious -X flag again, but with more patience.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ zpool import -FX tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e"># … waiting … staring … go get dinner … waiting … put baby to bed …&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Exit 0! It worked!&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ ls /mnt/tank
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>files files files!&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Immediately:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ rsync -ahP /mnt/tank elsewhere:/mnt/pond/tank&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>I later find out that some folks on forums recommend against disk passthrough for ZFS pools in VMs, but this may depend on the HBA controller.&lt;/p>
&lt;p>Now, I pass the entire HBA controller to guest VMs instead of individual disks when using ZFS. Lesson learned.&lt;/p>
&lt;p>The end.&lt;/p>
&lt;p>Thank you FreeBSD, Truenas, and r/zfs communities.&lt;/p>
&lt;hr>
&lt;p>&lt;a id="flash-instructions" href="#flash-instructions">1&lt;/a>: There are several instructions to flash the Dell Perc H310 HBA to IT mode: &lt;a href="https://www.youtube.com/watch?v=EOcpp-GdhKo">video walkthrough&lt;/a>, &lt;a href="https://www.servethehome.com/ibm-serveraid-m1015-part-4/">ServeTheHome post&lt;/a>, and &lt;a href="https://www.truenas.com/community/threads/confused-about-that-lsi-card-join-the-crowd.11901/">TrueNAS forum thread&lt;/a>&lt;/p></content></entry><entry><title>Tabbed extension</title><link rel="alternate" href="https://brett.cloud/tabbed/"/><id>https://brett.cloud/tabbed/</id><published>2023-04-03T00:00:00+0000</published><updated>2023-04-03T00:00:00+0000</updated><summary>&lt;div class="flex justify-center">
&lt;img width="128" src="./icon.png" alt="session manager extension icon" class="my-3" />
&lt;/div>
&lt;h1 align="center">Tabbed&lt;/h1>
&lt;p>Tabbed is an experiment with a Chrome extension to visualize and organize
browser tabs.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./screenshot.png" alt="dragging window tab to a new window" />
&lt;figcaption>Drag and drop browser session management&lt;/figcaption>
&lt;/figure>
&lt;p>Tabbed was built with accessibility in mind. See the full
&lt;a href="https://github.com/brettinternet/tabbed">feature list and source&lt;/a> or
&lt;a href="https://github.com/brettinternet/tabbed/releases">the latest releases&lt;/a>.&lt;/p>
&lt;div class='text-center mt-12'>
&lt;a
href="https://chrome.google.com/webstore/detail/tabbed/paejpihjkfoijpmicndggfpgnnccfggg"
target="_blank"
rel="noopener noreferrer"
class='group p-2 space-x-2 border-slate-400 border border-solid items-center leading-none rounded-full inline-flex no-underline pl-4' role="alert">
&lt;span class="text-slate-700 font-serif font-semibold text-left flex-auto">View in Chrome Web Store&lt;/span>
&lt;span class="group-hover:translate-x-0.5 transition-transform">
&lt;svg
class="opacity-75 h-4 w-4"
xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
stroke="currentColor">
&lt;path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
&lt;/svg>
&lt;/span>
&lt;/a>
&lt;/div></summary><content type="html">&lt;div class="flex justify-center">
&lt;img width="128" src="./icon.png" alt="session manager extension icon" class="my-3" />
&lt;/div>
&lt;h1 align="center">Tabbed&lt;/h1>
&lt;p>Tabbed is an experiment with a Chrome extension to visualize and organize
browser tabs.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./screenshot.png" alt="dragging window tab to a new window" />
&lt;figcaption>Drag and drop browser session management&lt;/figcaption>
&lt;/figure>
&lt;p>Tabbed was built with accessibility in mind. See the full
&lt;a href="https://github.com/brettinternet/tabbed">feature list and source&lt;/a> or
&lt;a href="https://github.com/brettinternet/tabbed/releases">the latest releases&lt;/a>.&lt;/p>
&lt;div class='text-center mt-12'>
&lt;a
href="https://chrome.google.com/webstore/detail/tabbed/paejpihjkfoijpmicndggfpgnnccfggg"
target="_blank"
rel="noopener noreferrer"
class='group p-2 space-x-2 border-slate-400 border border-solid items-center leading-none rounded-full inline-flex no-underline pl-4' role="alert">
&lt;span class="text-slate-700 font-serif font-semibold text-left flex-auto">View in Chrome Web Store&lt;/span>
&lt;span class="group-hover:translate-x-0.5 transition-transform">
&lt;svg
class="opacity-75 h-4 w-4"
xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
stroke="currentColor">
&lt;path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
&lt;/svg>
&lt;/span>
&lt;/a>
&lt;/div></content></entry><entry><title>Mic Mute for macOS</title><link rel="alternate" href="https://brett.cloud/mic-mute/"/><id>https://brett.cloud/mic-mute/</id><published>2023-03-11T00:00:00+0000</published><updated>2023-03-11T00:00:00+0000</updated><summary>&lt;div class="flex justify-center">
&lt;img width="128" src="./icon.png" alt="disabled microphone app icon" class="my-3" />
&lt;/div>
&lt;h1 align="center">Mic Mute for macOS&lt;/h1>
&lt;p>&lt;a href="https://github.com/brettinternet/mic-mute">Mic Mute&lt;/a> is a system-wide mute for
macOS with a global shortcut and a clear visual indicator. It&amp;rsquo;s inspired by
&lt;a href="https://learn.microsoft.com/en-us/windows/powertoys/video-conference-mute">VCM&lt;/a>
for Windows.&lt;/p>
&lt;p>Mute with the shortcut &lt;kbd>Cmd&lt;/kbd> &lt;kbd>Shift&lt;/kbd> &lt;kbd>A&lt;/kbd>
or from the system tray dropdown menu.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./screenshot.png" alt="popup window screenshot indicating the microphone is off" />
&lt;figcaption>Mute window follows cursor to screens and monitors&lt;/figcaption>
&lt;/figure>
&lt;p>The mute indicator window will follow the cursor to desktops or screens and
monitors. The system tray icon will also indicate the mute status. Once
microphones are on again, the window will hide.
&lt;a href="https://github.com/brettinternet/mic-mute/releases">View releases&lt;/a>.&lt;/p></summary><content type="html">&lt;div class="flex justify-center">
&lt;img width="128" src="./icon.png" alt="disabled microphone app icon" class="my-3" />
&lt;/div>
&lt;h1 align="center">Mic Mute for macOS&lt;/h1>
&lt;p>&lt;a href="https://github.com/brettinternet/mic-mute">Mic Mute&lt;/a> is a system-wide mute for
macOS with a global shortcut and a clear visual indicator. It&amp;rsquo;s inspired by
&lt;a href="https://learn.microsoft.com/en-us/windows/powertoys/video-conference-mute">VCM&lt;/a>
for Windows.&lt;/p>
&lt;p>Mute with the shortcut &lt;kbd>Cmd&lt;/kbd> &lt;kbd>Shift&lt;/kbd> &lt;kbd>A&lt;/kbd>
or from the system tray dropdown menu.&lt;/p>
&lt;figure class="flex flex-col justify-center items-center">
&lt;img src="./screenshot.png" alt="popup window screenshot indicating the microphone is off" />
&lt;figcaption>Mute window follows cursor to screens and monitors&lt;/figcaption>
&lt;/figure>
&lt;p>The mute indicator window will follow the cursor to desktops or screens and
monitors. The system tray icon will also indicate the mute status. Once
microphones are on again, the window will hide.
&lt;a href="https://github.com/brettinternet/mic-mute/releases">View releases&lt;/a>.&lt;/p>
&lt;p>Muted and unmuted indicators:&lt;/p>
&lt;div class="flex flex-row items-center">
&lt;img src="./alert-on.png" alt="popup window screenshot indicating the microphone is off" class="border-1 border-slate-300 rounded-lg mx-auto max-w-56" />
&lt;img src="./alert-off.png" alt="popup window screenshot indicating the microphone is on" class="border-1 border-slate-300 rounded-lg mx-auto max-w-56" />
&lt;/div>
&lt;hr>
&lt;h2 id="update-what-i-use-now">Update: What I use now&lt;/h2>
&lt;p>My journey finding the best solution for this has evolved. I now use
&lt;a href="https://www.hammerspoon.org">Hammerspoon&lt;/a> which is a delightful way to hack
together MacOS scripts. I store my configuration
&lt;a href="https://github.com/brettinternet/dotfiles/tree/b72aee44e5039fa9f721eeb84c5145dca83e65fa/darwin/.hammerspoon">in my dotfiles&lt;/a>.
The Lua scripting in Hammerspoon makes maintaining this a lot more fun than
foreign functions in Rust. I&amp;rsquo;m still able to use the hotkey &lt;kbd>⌘ ⇧ A&lt;/kbd> and
I&amp;rsquo;ve also mapped it to a macropad that uses &lt;kbd>F13&lt;/kbd>. My script also
supports Push To Talk.&lt;/p>
&lt;p>Here&amp;rsquo;s the solution:&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-lua" data-lang="lua">&lt;span style="display:flex;">&lt;span>muteAlertId &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Clear the alert if exists to avoid notifications stacking&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">clearMuteAlert&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> muteAlertId &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> hs.alert.closeSpecific(muteAlertId)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Hold the hotkey for Push To Talk&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> holdingToTalk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">pushToTalk&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> holdingToTalk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> audio &lt;span style="color:#f92672">=&lt;/span> hs.audiodevice.defaultInputDevice()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> muted &lt;span style="color:#f92672">=&lt;/span> audio:inputMuted()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> muted &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clearMuteAlert()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> muteAlertId &lt;span style="color:#f92672">=&lt;/span> hs.alert.show(&lt;span style="color:#e6db74">&amp;#34;🎤 Microphone on&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> audio:setInputMuted(&lt;span style="color:#66d9ef">false&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- Toggles the default microphone&amp;#39;s mute state on hotkey release&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- or performs PTT when holding down the hotkey&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">local&lt;/span> &lt;span style="color:#66d9ef">function&lt;/span> &lt;span style="color:#a6e22e">toggleMuteOrPTT&lt;/span>()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> audio &lt;span style="color:#f92672">=&lt;/span> hs.audiodevice.defaultInputDevice()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> muted &lt;span style="color:#f92672">=&lt;/span> audio:inputMuted()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">local&lt;/span> muting &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">not&lt;/span> muted
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> holdingToTalk &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> holdingToTalk &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> audio:setInputMuted(&lt;span style="color:#66d9ef">true&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> muting &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">true&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> audio:setInputMuted(muting)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> clearMuteAlert()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> muting &lt;span style="color:#66d9ef">then&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> muteAlertId &lt;span style="color:#f92672">=&lt;/span> hs.alert.show(&lt;span style="color:#e6db74">&amp;#34;📵 Microphone muted&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">else&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> muteAlertId &lt;span style="color:#f92672">=&lt;/span> hs.alert.show(&lt;span style="color:#e6db74">&amp;#34;🎤 Microphone on&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">-- `⌘ ⇧ A` but you could also map to F13 for a macropad&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>hs.hotkey.bind({&lt;span style="color:#e6db74">&amp;#34;cmd&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;shift&amp;#34;&lt;/span>}, &lt;span style="color:#e6db74">&amp;#34;a&amp;#34;&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>, toggleMuteOrPTT, pushToTalk)&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>Hammerspoon also makes it incredibly easy to add other utilities, such as making
a hotkey to change the default audio output or input. Find the latest
&lt;a href="https://github.com/brettinternet/dotfiles/tree/9ff9cdaba6358b16fc0efa4f2fd3f0617f038dcb/mac/.hammerspoon">source in my dotfiles&lt;/a>.&lt;/p>
&lt;div class='text-center mt-12'>
&lt;a
href="https://github.com/brettinternet/dotfiles"
target="_blank"
rel="noopener noreferrer"
class='group p-2 space-x-2 border-slate-400 border border-solid items-center leading-none rounded-full inline-flex no-underline pl-4' role="alert">
&lt;span class="text-slate-700 font-serif font-semibold text-left flex-auto">View dotfiles&lt;/span>
&lt;span class="group-hover:translate-x-0.5 transition-transform">
&lt;svg
class="opacity-75 h-4 w-4"
xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
stroke="currentColor">
&lt;path stroke-linecap="round" stroke-linejoin="round" d="M8.25 4.5l7.5 7.5-7.5 7.5" />
&lt;/svg>
&lt;/span>
&lt;/a>
&lt;/div></content></entry><entry><title>You can self-host</title><link rel="alternate" href="https://brett.cloud/self-hosted/"/><id>https://brett.cloud/self-hosted/</id><published>2023-01-13T00:00:00+0000</published><updated>2023-01-13T00:00:00+0000</updated><summary>&lt;p>Remember the iPhone commercial from the late 2000s which introduced Apple&amp;rsquo;s
AppStore with the phrase, &amp;ldquo;There&amp;rsquo;s an app for that&amp;rdquo;? That&amp;rsquo;s how open source
services are now. There&amp;rsquo;s a wide selection of useful and mature software that
containerization has made exceptionally portable.&lt;/p>
&lt;p>My own &lt;a href="/homelab">homelab&lt;/a> has become a monorepo of DevOps overkill, but
self-hosting can be simple and easy with Docker. You can securely host
applications with a cheap desktop in your home with minimal effort and a single
docker-compose configuration file.&lt;/p></summary><content type="html">&lt;p>Remember the iPhone commercial from the late 2000s which introduced Apple&amp;rsquo;s
AppStore with the phrase, &amp;ldquo;There&amp;rsquo;s an app for that&amp;rdquo;? That&amp;rsquo;s how open source
services are now. There&amp;rsquo;s a wide selection of useful and mature software that
containerization has made exceptionally portable.&lt;/p>
&lt;p>My own &lt;a href="/homelab">homelab&lt;/a> has become a monorepo of DevOps overkill, but
self-hosting can be simple and easy with Docker. You can securely host
applications with a cheap desktop in your home with minimal effort and a single
docker-compose configuration file.&lt;/p>
&lt;h2 id="demo">Demo&lt;/h2>
&lt;p>I&amp;rsquo;ve set up a
&lt;a href="https://github.com/brettinternet/docker-compose-hosted-demo">simple demo to host an application&lt;/a>.&lt;/p>
&lt;p>Docker compose offers a very simple way to run and maintain self-hosted homelab.
The configuration is portable, easy to understand, and a container orchestration
can be run on a single node with just one command. As I demonstrate here, the
available tooling makes DNS and proxying automation and the service setup very
easy.&lt;/p>
&lt;p>This demo hosts a simple Elixir notebook application called Livebook. I work in
an Elixir shop where Livebook is a local favorite. Livebook uses notebooks
similar to Python&amp;rsquo;s Jupyter except it&amp;rsquo;s built with Elixir and has real-time
syncing between clients because it&amp;rsquo;s built on the Phoenix framework&amp;rsquo;s library
&lt;a href="https://hexdocs.pm/phoenix_live_view/Phoenix.LiveView.html">LiveView&lt;/a>.&lt;/p>
&lt;p>This demo will set up a Cloudflared tunnel connection, a Traefik reverse proxy
and the Livebook app. Cloudflare DNS is automated with CNAME creation from
Traefik routes. There&amp;rsquo;s no port forwarding required to host this app on a domain
you own.&lt;/p>
&lt;p>Here&amp;rsquo;s a sketch of the architecture:&lt;/p>
&lt;pre class="mermaid">
graph TB
tf(Terraform) -.- dns
tf -.- argo
dns{Cloudflare DNS} --&amp;gt; argo
argo((Cloudflare Tunnels)) == Tunnel ==&amp;gt; cloudflared
ddns -.- dns
subgraph lan[Docker Network]
style lan stroke-dasharray: 5 5
cloudflared --&amp;gt; traefik[Traefik reverse proxy]
traefik --&amp;gt; livebook[Livebook]
ddns[cloudflare-companion] -. service discovery .- livebook
end
&lt;/pre>
&lt;figure >
&lt;figcaption>Mermaid.js diagram of the architecture&lt;/figcaption>
&lt;/figure>
&lt;p>The phony make targets below are used to simplify each step. Look at the
&lt;a href="https://github.com/brettinternet/docker-compose-hosted-demo/blob/main/Makefile">Makefile&lt;/a>
to see what each one does.&lt;/p>
&lt;h3 id="setup">Setup&lt;/h3>
&lt;p>First, initialize the config file and terraform project.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make setup&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>This creates a &lt;code>.env&lt;/code> file which you should edit with your own secrets.
&lt;code>CLOUDFLARE_API_TOKEN&lt;/code> needs Zone.DNS and Account.Cloudflare Tunnel write
permissions for the domain in use. Use an API token, not an API key. The value
for &lt;code>CLOUDFLARE_TUNNEL_TOKEN&lt;/code> will come later.&lt;/p>
&lt;p>Then, create the Cloudflared tunnel. You&amp;rsquo;ll need Terraform, unless you create it
from the &lt;a href="https://one.dash.cloudflare.com/">Cloudflare Zero Trust dashboard&lt;/a>.
Note, using the dashboard setup, point the tunnel endpoint to
&lt;code>http://traefik:80&lt;/code> as the cloudflared image sees the host within the docker
network.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make terraform&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>This plans and applies the terraform tunnel configuration. It creates a CNAME
record tunnel.example.com that points to the Cloudflared tunnel URL.&lt;/p>
&lt;p>Find the &lt;code>tunnel_token&lt;/code> value in the terraform output file
&lt;code>./tunnel/terraform.tfstate&lt;/code> and add it as the value of
&lt;code>CLOUDFLARE_TUNNEL_TOKEN&lt;/code>.&lt;/p>
&lt;h3 id="run">Run&lt;/h3>
&lt;p>Start the docker compose.&lt;/p>
&lt;div class="group/codeblock relative overflow-x-auto my-6">
&lt;button class="copy-btn hidden opacity-0 group-hover/codeblock:opacity-100 cursor-pointer absolute top-2 right-2 px-2 py-1 bg-slate-700 hover:bg-slate-600 text-slate-300 text-xs rounded border border-slate-600 transition-opacity duration-200" aria-label="Copy code">
Copy
&lt;/button>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;" class="!bg-slate-900 !m-0">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>make start&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/div>
&lt;p>This runs &lt;code>docker-compose --compatibility up&lt;/code>. The compatibility flag appears to
be required in order to
&lt;a href="https://github.com/docker/compose/issues/4513">set resource limits in docker-compose&lt;/a>.&lt;/p>
&lt;h2 id="you-can-self-host">You can self-host&lt;/h2>
&lt;p>Self-hosting is a satisfying hobby with amazing utility. These methods also
provide ways to try out new technologies, host a simple blog, or make use of
existing services that you find on GitHub. Let me know if the demo has helped
you along with your own homelab.&lt;/p></content></entry><entry><title>Homelab</title><link rel="alternate" href="https://brett.cloud/homelab/"/><id>https://brett.cloud/homelab/</id><published>2022-11-02T00:00:00+0000</published><updated>2022-11-02T00:00:00+0000</updated><summary>&lt;p>Don&amp;rsquo;t be fooled, having a home server is really just hundreds of hours of
&lt;a href="https://wiki.archlinux.org/index.php/Badblocks">badblocks&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve been hard at work recently converting my architecture to support
orchestrated deployments with multiple nodes. I haven&amp;rsquo;t quite achieved
high-availability, and I&amp;rsquo;m not likely to take things that far. However, it has
been an excellent journey to become more acquainted with Kubernetes.&lt;/p>
&lt;p>Setup and usage are inspired by a
&lt;a href="https://github.com/onedr0p/flux-cluster-template">homelab gitops template&lt;/a> and
the &lt;a href="https://github.com/k8s-at-home">k8s-at-home&lt;/a> community. You can find
similar setups with the
&lt;a href="https://nanne.dev/k8s-at-home-search/">k8s at home search&lt;/a>.
&lt;a href="https://github.com/brettinternet/homeops/tree/2481045c3a9a6542f10095c9550e324161394286">Historical revisions&lt;/a>
of my homelab setup had rootless Podman containers deployed with ansible as
systemd units. Prior to that, I
&lt;a href="https://github.com/brettinternet/homeops/tree/d1d2c02106e61685d38c199d5971bc383831f72d">used docker-compose&lt;/a>
to orchestrate containers on a single node.&lt;/p></summary><content type="html">&lt;p>Don&amp;rsquo;t be fooled, having a home server is really just hundreds of hours of
&lt;a href="https://wiki.archlinux.org/index.php/Badblocks">badblocks&lt;/a>.&lt;/p>
&lt;p>I&amp;rsquo;ve been hard at work recently converting my architecture to support
orchestrated deployments with multiple nodes. I haven&amp;rsquo;t quite achieved
high-availability, and I&amp;rsquo;m not likely to take things that far. However, it has
been an excellent journey to become more acquainted with Kubernetes.&lt;/p>
&lt;p>Setup and usage are inspired by a
&lt;a href="https://github.com/onedr0p/flux-cluster-template">homelab gitops template&lt;/a> and
the &lt;a href="https://github.com/k8s-at-home">k8s-at-home&lt;/a> community. You can find
similar setups with the
&lt;a href="https://nanne.dev/k8s-at-home-search/">k8s at home search&lt;/a>.
&lt;a href="https://github.com/brettinternet/homeops/tree/2481045c3a9a6542f10095c9550e324161394286">Historical revisions&lt;/a>
of my homelab setup had rootless Podman containers deployed with ansible as
systemd units. Prior to that, I
&lt;a href="https://github.com/brettinternet/homeops/tree/d1d2c02106e61685d38c199d5971bc383831f72d">used docker-compose&lt;/a>
to orchestrate containers on a single node.&lt;/p>
&lt;h2 id="setup">Setup&lt;/h2>
&lt;p>Here have been some of my goals:&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://toolkit.fluxcd.io/">Flux&lt;/a> GitOps with this repository
(&lt;a href="https://github.com/brettinternet/cluster">cluster directory&lt;/a>)&lt;/li>
&lt;li>Ansible node provisioning and
&lt;a href="https://github.com/PyratLabs/ansible-role-k3s">K3s setup&lt;/a> (Ansible
&lt;a href="https://github.com/brettinternet/cluster/blob/main/provision/ansible/roles">roles&lt;/a>
and
&lt;a href="https://github.com/brettinternet/cluster/blob/main/provision/ansible">playbooks&lt;/a>)&lt;/li>
&lt;li>Terraform DNS records
(&lt;a href="https://github.com/brettinternet/cluster/blob/main/provision/terraform">terraform&lt;/a>)&lt;/li>
&lt;li>&lt;a href="https://github.com/mozilla/sops">SOPS&lt;/a> secrets stored in Git&lt;/li>
&lt;li>&lt;a href="https://github.com/renovatebot/renovate">Renovate bot&lt;/a> dependency updates&lt;/li>
&lt;li>WireGuard VPN pod gateway via paid service&lt;/li>
&lt;li>WireGuard VPN proxy hosted on VPS&lt;/li>
&lt;li>&lt;a href="https://github.com/cloudflare/cloudflared">Cloudflared HTTP tunnel&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/ori-edge/k8s_gateway">K8s gateway&lt;/a> for local DNS
resolution to cluster and
&lt;a href="https://kubernetes.github.io/ingress-nginx/">NGINX ingress controller&lt;/a>&lt;/li>
&lt;li>Both internal &amp;amp; external services with a service
&lt;a href="https://github.com/ori-edge/k8s_gateway/">gateway&lt;/a>&lt;/li>
&lt;li>OIDC
&lt;a href="https://www.authelia.com/configuration/identity-providers/open-id-connect/">authentication&lt;/a>
with &lt;a href="https://github.com/nitnelave/lldap">LDAP&lt;/a>&lt;/li>
&lt;li>Automatic Cloudflare DNS updates&lt;/li>
&lt;li>&lt;a href="https://metallb.universe.tf/">MetalLB&lt;/a> bare metal K8s network loadbalancing&lt;/li>
&lt;li>&lt;a href="https://www.tigera.io/project-calico/">Calico&lt;/a> CNI&lt;/li>
&lt;li>&lt;a href="https://wiki.archlinux.org/index.php/ZFS">ZFS&lt;/a>&lt;/li>
&lt;li>JBOD &lt;a href="https://github.com/trapexit/mergerfs">mergerfs&lt;/a> union NFS with
&lt;a href="https://www.snapraid.it">SnapRAID&lt;/a> backup for low-touch media files&lt;/li>
&lt;li>&lt;a href="https://restic.net">Restic&lt;/a> backups to remote and local buckets&lt;/li>
&lt;li>&lt;a href="https://taskfile.dev">go-task&lt;/a> shorthand for useful commands
(&lt;a href="https://github.com/brettinternet/cluster/blob/main/Taskfile.yaml">Taskfile&lt;/a>
and
&lt;a href="https://github.com/brettinternet/cluster/blob/main/.taskfiles">taskfiles&lt;/a>)&lt;/li>
&lt;/ul>
&lt;h3 id="some-questions">Some questions&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://danluu.com/why-ecc/">Why use ECC RAM?&lt;/a>
&lt;ul>
&lt;li>&lt;a href="https://news.ycombinator.com/item?id=14206635">Hacker News discussion&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://arstechnica.com/civis/threads/ars-walkthrough-using-the-zfs-next-gen-filesystem-on-linux.1235679/#p26303271">If you love your data, use ECC RAM&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://en.wikipedia.org/wiki/ECC_memory#Description">Error rates increase rapidly with rising altitude&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="hardware">Hardware&lt;/h2>
&lt;p>I finally upgraded my media server chassis to a
&lt;a href="https://www.techyparts.com/supermicro-cse-826be16-r1k28lpb-2u-server-chassis-2x1280w-12x3-5-bpn-sas2-826el1.html">Supermicro CSE-826&lt;/a>.
For almost 7 years I was using a
&lt;a href="https://www.fractal-design.com/products/cases/node/node-804/black/">Node 804&lt;/a>,
which is popular among hobbyists because it fits 8x 3.5&amp;quot; drivers. I use old
desktop hardware for this NAS and other nodes.&lt;/p>
&lt;p>I used a widely-known and inexpensive method to add additional SATA storage via
a Host Bus Adapter (HBA). I purchased a
&lt;a href="https://www.ebay.com/sch/i.html?_nkw=Dell+Perc+H310+SATA">Dell Perc H310&lt;/a> a
long while back. Mine did come from overseas, but it turned out to be legit.
&lt;a href="https://www.youtube.com/watch?v=EOcpp-GdhKo">This video&lt;/a> shows how it can be
flashed to an LSI 9211-8i IT (it&amp;rsquo;s called IT mode; see also
&lt;a href="https://www.servethehome.com/ibm-serveraid-m1015-part-4/">1&lt;/a>,
&lt;a href="https://www.truenas.com/community/threads/confused-about-that-lsi-card-join-the-crowd.11901/">2&lt;/a>).&lt;/p>
&lt;p>Here are other recommended
&lt;a href="https://www.reddit.com/r/DataHoarder/wiki/hardware#wiki_controllers">controllers&lt;/a>.&lt;/p></content></entry><entry><title>Dotfiles</title><link rel="alternate" href="https://brett.cloud/dotfiles/"/><id>https://brett.cloud/dotfiles/</id><published>2021-10-27T00:00:00+0000</published><updated>2021-10-27T00:00:00+0000</updated><summary>&lt;p>My &lt;a href="https://github.com/brettinternet/dotfiles">dotfiles&lt;/a> are easy to setup for
both desktop consoles and headless servers. I use Make, bash scripts and
&lt;a href="https://github.com/anishathalye/dotbot">dotbot&lt;/a>, an idempotent python script
which configures directories, creates symlinks and run postscripts for Linux and
macOS. I&amp;rsquo;ve broken the dotbot configuration out into multiple modules to select
features suited for different environments.&lt;/p>
&lt;p>I&amp;rsquo;ve simplifed my nvim and emacs configurations by just using Astronvim and Doom
respectively. While I love &lt;a href="https://i3wm.org/">i3&lt;/a>, I&amp;rsquo;m in the process of
configuring &lt;a href="https://swaywm.org/">Sway&lt;/a> to see if I can match my productivity on
Wayland.&lt;/p></summary><content type="html">&lt;p>My &lt;a href="https://github.com/brettinternet/dotfiles">dotfiles&lt;/a> are easy to setup for
both desktop consoles and headless servers. I use Make, bash scripts and
&lt;a href="https://github.com/anishathalye/dotbot">dotbot&lt;/a>, an idempotent python script
which configures directories, creates symlinks and run postscripts for Linux and
macOS. I&amp;rsquo;ve broken the dotbot configuration out into multiple modules to select
features suited for different environments.&lt;/p>
&lt;p>I&amp;rsquo;ve simplifed my nvim and emacs configurations by just using Astronvim and Doom
respectively. While I love &lt;a href="https://i3wm.org/">i3&lt;/a>, I&amp;rsquo;m in the process of
configuring &lt;a href="https://swaywm.org/">Sway&lt;/a> to see if I can match my productivity on
Wayland.&lt;/p></content></entry><entry><title>Building a Hackintosh</title><link rel="alternate" href="https://brett.cloud/hackintosh/"/><id>https://brett.cloud/hackintosh/</id><published>2017-04-23T00:00:00+0000</published><updated>2017-04-23T00:00:00+0000</updated><summary>&lt;p>Apple&amp;rsquo;s overpriced offering is moving away from modular, upgradable hardware.
Some recent unveils of the iMac, Mac Pro, and MacBook Pro failed to meet the
expectations of many professionals that demand improved specifications. Using
the more powerful hardware available with macOS can be the ultimate environment
for a developer—Unix coupled with strong machinery. For example, at the time of
writing this, I&amp;rsquo;m on my Kaby Lake build, but current Apple hardware doesn&amp;rsquo;t
offer the newest Intel generation. This is currently experimental in the
community, but more stable options do exist with Skylake hardware.&lt;/p></summary><content type="html">&lt;p>Apple&amp;rsquo;s overpriced offering is moving away from modular, upgradable hardware.
Some recent unveils of the iMac, Mac Pro, and MacBook Pro failed to meet the
expectations of many professionals that demand improved specifications. Using
the more powerful hardware available with macOS can be the ultimate environment
for a developer—Unix coupled with strong machinery. For example, at the time of
writing this, I&amp;rsquo;m on my Kaby Lake build, but current Apple hardware doesn&amp;rsquo;t
offer the newest Intel generation. This is currently experimental in the
community, but more stable options do exist with Skylake hardware.&lt;/p>
&lt;p>I first started developing on a MacBook. There are aspects of Apple&amp;rsquo;s laptops
that other hardware manufactures have not been able to match for me quite yet.
But as for a desktop where form factor, sleek aluminum design, and the
responsive trackpad are not concerns, then a Hackintosh is the way to go for
tabletop computing.&lt;/p>
&lt;p>Should you build a hackintosh? Probably not. It&amp;rsquo;s a breach of Apple&amp;rsquo;s macOS
Terms and Conditions and they
&lt;a href="https://en.wikipedia.org/wiki/Psystar_Corporation">have sued companies&lt;/a> that
attempt to turn a profit. However, Apple has been kind and
&lt;a href="https://www.reddit.com/r/hackintosh/comments/2ek35g/is_it_technically_illegal/">hasn&amp;rsquo;t litigated individuals&lt;/a>.
Building a Hackintosh involves a &lt;em>lot&lt;/em> of troubleshooting and tinkering. But if
you&amp;rsquo;re okay with all of this, then try it out! The first place to start is to
begin lurking in the community
(&lt;a href="https://reddit.com/r/hackintosh">/r/hackintosh&lt;/a>).&lt;/p>
&lt;p>I&amp;rsquo;ve posted a
&lt;a href="https://github.com/brettinternet/hackintosh/blob/8788216554bf169d0f7eff2581ab372e14ce3b2b/docs/setup.md">guide to my most recent build&lt;/a>
where I use the latest Kaby Lake Intel processor and the latest mobo. I use an
NVMe SSD, bluetooth accessories, iMessage, and other necessary features. My
passion for Hackintosh fluctuates with my availability, but you can see my
builds, guides and troubleshooting research at
&lt;a href="https://github.com/brettinternet/hackintosh">brettinternet/hackintosh&lt;/a>.&lt;/p>
&lt;hr>
&lt;p>&lt;strong>Feb 2019 update&lt;/strong>: Proprietary software can be frustrating and in privacy
matters and developer support Apple appears to be straying further from the
light. I&amp;rsquo;ve archived my personal Hackintosh project and moved on to
&lt;a href="/dotfiles">Linux&lt;/a>.&lt;/p></content></entry><entry><title>Manage notes with markdown and git</title><link rel="alternate" href="https://brett.cloud/notes/"/><id>https://brett.cloud/notes/</id><published>2017-02-06T00:00:00+0000</published><updated>2017-02-06T00:00:00+0000</updated><summary>&lt;p>In school, to keep up with my peers, I took meticulous notes. I read and reread
assignments, and I constantly evaluated my priorities to stay on task. I became
obsessed with managing my productivity. I&amp;rsquo;ve used feature-rich apps like
OmniFocus or Wunderlist and simpler tools like Apple Reminders.&lt;/p>
&lt;p>For a while I used Evernote for note-taking, then I tried OneNote, Apple Notes
and even Google Keep. I left Evernote because they&amp;rsquo;d seemed to have lost their
way with gimmicky features. I liked that OneNote didn&amp;rsquo;t force-feed a premium
option and it was just as accessible as Evernote. Later, I thought that maybe
Apple Notes would be just enough for me, but I eventually found that it wasn&amp;rsquo;t
better for anything other than lists or using the touch draw feature.&lt;/p></summary><content type="html">&lt;p>In school, to keep up with my peers, I took meticulous notes. I read and reread
assignments, and I constantly evaluated my priorities to stay on task. I became
obsessed with managing my productivity. I&amp;rsquo;ve used feature-rich apps like
OmniFocus or Wunderlist and simpler tools like Apple Reminders.&lt;/p>
&lt;p>For a while I used Evernote for note-taking, then I tried OneNote, Apple Notes
and even Google Keep. I left Evernote because they&amp;rsquo;d seemed to have lost their
way with gimmicky features. I liked that OneNote didn&amp;rsquo;t force-feed a premium
option and it was just as accessible as Evernote. Later, I thought that maybe
Apple Notes would be just enough for me, but I eventually found that it wasn&amp;rsquo;t
better for anything other than lists or using the touch draw feature.&lt;/p>
&lt;p>Now as a developer, I use markdown in my text editor. This process for
note-taking certainly isn&amp;rsquo;t novel – you&amp;rsquo;ll even find books on GitHub written
with markdown. Markdown offers the most formatting versatility, especially to
display code excerpts with syntax highlighting and quickly reference links,
create lists, and break notes out by sections. This is especially true since
&lt;a href="https://github.github.com/gfm/">GitHub&amp;rsquo;s flavoring&lt;/a> and small enhancements have
made markdown previewing so accessible. Even this blog is made using markdown.&lt;/p>
&lt;h3 id="markdown">Markdown&lt;/h3>
&lt;p>I love markdown. I like how widely supported it is, and I like how clear the markdown
format is for conveying information. Markdown has become the ubiquitous plain text
format for the GitHub community. My own blog posts are written in markdown
(&lt;a href="https://github.com/brettinternet/brettinternet.github.io/">brettinternet.github.io&lt;/a>).
Composing markdown is a timeless method that isn&amp;rsquo;t tied to any third-party tools
except a modern text editor (which isn&amp;rsquo;t going anywhere).&lt;/p>
&lt;p>It&amp;rsquo;s true, this method isn&amp;rsquo;t perfect. I need separate tools for sketches and PDF
markups. But these mediums make up about 0.5% of all my notes. I just use my
NextCloud for storing files or Keybase for my public documents.&lt;/p>
&lt;p>GitHub has formalized their &lt;a href="https://github.github.com/gfm/">CommonMark specification&lt;/a>
to standardize GitHub&amp;rsquo;s flavor of markdown.
Commonmark was put together by a few representatives of some major companies
that use markdown like GitHub, Reddit, and Stack Exchange. Some nonconforming
markdown features have added some very nice features such as task lists,
autolinking, diff and code block improvements.&lt;/p>
&lt;h3 id="git">Git&lt;/h3>
&lt;p>I maintain a separate GitHub repository for my private notes and
another for my &lt;a href="https://github.com/brettinternet/public-notes">public notes&lt;/a>.
Eventually, I&amp;rsquo;d like to self-host my own GitLab within
&lt;a href="https://github.com/brettinternet/homelab">my homelab&lt;/a>.&lt;/p>
&lt;p>My commit messages are short, but I attempt to make them meaningful so I can see
my note history and refer back to find deleted excerpts. I also use
&lt;a href="https://github.com/brettinternet/dotfiles/blob/master/.aliases">aliases&lt;/a> for
git commands to make pushing to master very fast.&lt;/p>
&lt;h3 id="desktop">Desktop&lt;/h3>
&lt;p>I use Vim and VS Code for note-taking. Taking notes in my editor environment is ideal
since I&amp;rsquo;m most comfortable with the shortcuts. VS Code offers
a markdown previewer out of the box with &lt;code>Ctrl&lt;/code> + &lt;code>Shift&lt;/code> + &lt;code>V&lt;/code>. Markdown&amp;rsquo;s
lifespan on desktop will exceed my own, so I&amp;rsquo;m no longer bound to an app&amp;rsquo;s
survival on a platform to access my notes.&lt;/p>
&lt;p>&lt;a href="https://github.com/ShareX/ShareX">ShareX&lt;/a> is a good option for screenshots on
Windows, while &lt;a href="https://flameshot.org/">Flameshot&lt;/a> works well on Linux. I tend to think that a simple
bookmark is better than web clippings for most use cases.&lt;/p>
&lt;h3 id="mobile">Mobile&lt;/h3>
&lt;p>Before I found &lt;a href="https://workingcopyapp.com/">Working Copy&lt;/a>, a solid mobile git
solution for iOS was &lt;em>the&lt;/em> missing piece for keeping notes in a git repository.
There are equally good options on Android like &lt;a href="https://github.com/maks/MGit">MGit&lt;/a> or &lt;a href="https://termux.dev/">Termux&lt;/a>. Working Copy
offers free repository cloning and viewing, with push capabilities available through in-app purchase. The app includes
SSH key support, syntax highlighting, and markdown preview. It&amp;rsquo;s an
excellent mobile git client for iOS.&lt;/p>
&lt;h3 id="save-menu">Save Menu&lt;/h3>
&lt;blockquote>
&lt;p>Everything not saved will be lost.&lt;/p>
&lt;p>- &lt;em>Nintendo &amp;ldquo;Quit Screen&amp;rdquo; message&lt;/em>&lt;/p>&lt;/blockquote>
&lt;p>Like an accessible save menu, I keep everything in markdown. I record Docker
commands and obscure command-line arguments, JavaScript problems, or
directions to set up Postgres permissions. I also
&lt;a href="https://github.com/brettinternet/slides">create slides&lt;/a> with markdown.
I&amp;rsquo;ll only note something if it&amp;rsquo;s easier to reference my notes than
search for it online. I also take
notes to help students I mentor.&lt;/p>
&lt;p>I use a combination of Apple Reminders and private GitHub issues with task lists
for short term personal tasks, and GitHub Projects to visualize Kanban project
and portfolio management. But for notes, I like good ol&amp;rsquo; fashioned git and
markdown. I use a private repository for my personal notes, and a separate repo
for my public notes. I believe this method is the strongest embrace of
trustworthy technology. Git and markdown are two timeless tools that are sure to
be around for a long time.&lt;/p>
&lt;hr>
&lt;div class="border-l-4 border-blue-500 p-2 my-5" role="alert">
&lt;div class="not-prose flex items-center gap-1 text-blue-700 mb-1">
&lt;svg
class="h-5 w-5"
xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
stroke="currentColor">
&lt;path stroke-linecap="round" stroke-linejoin="round"
d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
&lt;/svg>
&lt;span class="font-semibold">June 2020 update&lt;/span>
&lt;/div>
&lt;div>
I began experimenting with a much
simpler approach for tracking work-in-progress: &lt;code>todo.txt&lt;/code> format.
&lt;/div>
&lt;/div>
&lt;div class="border-l-4 border-blue-500 p-2 my-5" role="alert">
&lt;div class="not-prose flex items-center gap-1 text-blue-700 mb-1">
&lt;svg
class="h-5 w-5"
xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
stroke="currentColor">
&lt;path stroke-linecap="round" stroke-linejoin="round"
d="M11.25 11.25l.041-.02a.75.75 0 011.063.852l-.708 2.836a.75.75 0 001.063.853l.041-.021M21 12a9 9 0 11-18 0 9 9 0 0118 0zm-9-3.75h.008v.008H12V8.25z" />
&lt;/svg>
&lt;span class="font-semibold">Aug. 2024 update&lt;/span>
&lt;/div>
&lt;div>
As a parent with limited time, I&amp;rsquo;ve simplified to using
my phone&amp;rsquo;s built-in notes app for quick capture. Sometimes convenience trumps
optimal workflow and the stage of life I&amp;rsquo;m in calls for it.
&lt;/div>
&lt;/div></content></entry><entry><title>About me</title><link rel="alternate" href="https://brett.cloud/about/"/><id>https://brett.cloud/about/</id><published>0001-01-01T00:00:00+0000</published><updated>0001-01-01T00:00:00+0000</updated><summary>&lt;div class="not-prose flex flex-col items-center justify-center container mb-6 sm:mb-12 mx-auto">
&lt;a href="/">
&lt;picture>
&lt;source
type="image/webp"
srcset="/about/profile_hu_2eef663adb0258d6.webp"
data-srcset="/about/profile_hu_a37a9af8b11298de.webp 160w"
sizes="(max-width: 500px) 100vw, (max-width: 800px) 90vw, (max-width: 1200px) 80vw, 1200px"
/>
&lt;img
class="transition-all duration-200 opacity-100 rounded-full border-4 border-solid border-slate-900 bg-slate-900 mx-auto"
alt="Brett Gardiner"
src="/about/profile_hu_6a715c5956f12c51.png"
data-src="/about/profile_hu_c80af297f4462462.png"
srcset="/about/profile_hu_6a715c5956f12c51.png"
data-srcset="/about/profile_hu_c80af297f4462462.png 160w"
sizes="(max-width: 500px) 100vw, (max-width: 800px) 90vw, (max-width: 1200px) 80vw, 1200px"
width="160"
height="160"
loading="lazy"
decoding="async"
/>
&lt;/picture>
&lt;/a>
&lt;/div>
&lt;ul class="not-prose list-none p-0 mx-0 my-3 sm:my-6 font-article grid xs:grid-cols-3 gap-4 content-center">
&lt;li class="text-center xs:text-left">
&lt;a href="https://github.com/brettinternet" class="underline">code with me&lt;/a>
&lt;/li>
&lt;li class="text-center xs:text-center">
&lt;a href="/recruit" class="underline">recruit me&lt;/a>
&lt;/li>
&lt;li class="text-center xs:text-right">
&lt;a href="https://linkedin.com/in/brettinternet" class="underline">work with me&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>
Brett Gardiner is passionate at writing enterprise software fit for solving problems at different scales and velocities.
Recently, Brett has been hard at work optimizing realtime communication with hundreds of thousands of devices.
&lt;/p></summary><content type="html">&lt;div class="not-prose flex flex-col items-center justify-center container mb-6 sm:mb-12 mx-auto">
&lt;a href="/">
&lt;picture>
&lt;source
type="image/webp"
srcset="/about/profile_hu_2eef663adb0258d6.webp"
data-srcset="/about/profile_hu_a37a9af8b11298de.webp 160w"
sizes="(max-width: 500px) 100vw, (max-width: 800px) 90vw, (max-width: 1200px) 80vw, 1200px"
/>
&lt;img
class="transition-all duration-200 opacity-100 rounded-full border-4 border-solid border-slate-900 bg-slate-900 mx-auto"
alt="Brett Gardiner"
src="/about/profile_hu_6a715c5956f12c51.png"
data-src="/about/profile_hu_c80af297f4462462.png"
srcset="/about/profile_hu_6a715c5956f12c51.png"
data-srcset="/about/profile_hu_c80af297f4462462.png 160w"
sizes="(max-width: 500px) 100vw, (max-width: 800px) 90vw, (max-width: 1200px) 80vw, 1200px"
width="160"
height="160"
loading="lazy"
decoding="async"
/>
&lt;/picture>
&lt;/a>
&lt;/div>
&lt;ul class="not-prose list-none p-0 mx-0 my-3 sm:my-6 font-article grid xs:grid-cols-3 gap-4 content-center">
&lt;li class="text-center xs:text-left">
&lt;a href="https://github.com/brettinternet" class="underline">code with me&lt;/a>
&lt;/li>
&lt;li class="text-center xs:text-center">
&lt;a href="/recruit" class="underline">recruit me&lt;/a>
&lt;/li>
&lt;li class="text-center xs:text-right">
&lt;a href="https://linkedin.com/in/brettinternet" class="underline">work with me&lt;/a>
&lt;/li>
&lt;/ul>
&lt;p>
Brett Gardiner is passionate at writing enterprise software fit for solving problems at different scales and velocities.
Recently, Brett has been hard at work optimizing realtime communication with hundreds of thousands of devices.
&lt;/p>
&lt;ul class="not-prose list-none mt-3 sm:mt-6 mb-6 sm:mb-12 p-0 mx-0 font-article flex flex-row items-center justify-center space-x-9">
&lt;li class="text-center xs:text-left">
&lt;a
href="https://github.com/brettinternet"
class="inline-flex items-center no-underline gap-1 group"
target="_blank"
rel="noopener noreferrer"
w
>
&lt;svg
class="w-4 h-4"
xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none"
stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
>
&lt;path
d="M9 19c-5 1.5-5-2.5-7-3m14 6v-3.87a3.37 3.37 0 0 0-.94-2.61c3.14-.35 6.44-1.54 6.44-7A5.44 5.44 0 0 0 20 4.77 5.07 5.07 0 0 0 19.91 1S18.73.65 16 2.48a13.38 13.38 0 0 0-7 0C6.27.65 5.09 1 5.09 1A5.07 5.07 0 0 0 5 4.77a5.44 5.44 0 0 0-1.5 3.78c0 5.42 3.3 6.61 6.44 7A3.37 3.37 0 0 0 9 18.13V22">&lt;/path>
&lt;/svg>
&lt;span class="group-hover:underline">GitHub&lt;/span>
&lt;/a>
&lt;/li>
&lt;li class="text-center xs:text-right">
&lt;a
href="https://linkedin.com/in/brettinternet"
class="inline-flex items-center no-underline gap-1 group"
target="_blank"
rel="noopener noreferrer"
w
>
&lt;svg
class="w-4 h-4"
xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none"
stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
>
&lt;path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z">&lt;/path>
&lt;rect x="2" y="9" width="4" height="12">&lt;/rect>
&lt;circle cx="4" cy="4" r="2">&lt;/circle>
&lt;/svg>
&lt;span class="group-hover:underline">LinkedIn&lt;/span>
&lt;/a>
&lt;/li>
&lt;/ul>
&lt;div class="px-0">
&lt;div class="grid sm:grid-cols-2 gap-4">
&lt;details open>
&lt;summary class="font-serif">What do I like?&lt;/summary>
&lt;p>I like my family, pizza, Linux, reading, spinach but not arugula, early morning hikes in the Rocky Mountains, custom keyboards, movies, and tinkering with IoT devices.&lt;/p>
&lt;/details>
&lt;details open>
&lt;summary class="font-serif">What are my hobbies?&lt;/summary>
&lt;p>I play pickleball, hike and camp. I also have numerous ongoing projects such as a self-hosted kubernetes homelab and moonlighting programming projects.&lt;/p>
&lt;/details>
&lt;details>
&lt;summary class="font-serif">How do we get in touch?&lt;/summary>
&lt;p>Please try one of the channels linked above.&lt;br />You may also reach me at:&lt;br />&lt;code>hi@[this website's domain]&lt;/code>&lt;/p>
&lt;/details>
&lt;/div></content></entry></feed>