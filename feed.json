{"version":"https://jsonfeed.org/version/1","title":"brett.cloud","home_page_url":"https://brett.cloud","feed_url":"https://brett.cloud/feed.json","author":{"name":"Brett Gardiner","email":"hi@[domain]"},"items":[{"id":"2dd8becd-9037-531a-f966-555334dcc916","url":"https://brett.cloud/tabbed/","title":"Tabbed extension","summary":" Tabbed Tabbed is an experiment with a Chrome extension to visualize and organize browser tabs.\nDrag and drop browser session management Tabbed was built with accessibility in mind. See the full feature list and source or the latest releases.\nView in Chrome Web Store ","content_text":" Tabbed Tabbed is an experiment with a Chrome extension to visualize and organize browser tabs.\nDrag and drop browser session management Tabbed was built with accessibility in mind. See the full feature list and source or the latest releases.\nView in Chrome Web Store ","banner_image":"https://brett.cloud/tabbed/icon_hu115f2cf4401667a26b0174ab6059e9e8_11072_480x360_fit_box_3.png","date_published":"2023-04-03T00:00:00Z","date_modified":"2023-04-03T00:00:00Z"},{"id":"241d319e-7f12-5c53-2982-d0d38ee5ec95","url":"https://brett.cloud/mic-mute/","title":"Mic Mute for macOS","summary":"Mic Mute for macOS Mic Mute is a system-wide mute for macOS with a global shortcut and a clear visual indicator. It\u0026rsquo;s inspired by VCM for Windows.\nMute with the shortcut Cmd Shift A or from the system tray dropdown menu.\nMute window follows cursor to screens and monitors The mute indicator window will follow the cursor to desktops or screens and monitors. The system tray icon will also indicate the mute status.","content_text":" Mic Mute for macOS Mic Mute is a system-wide mute for macOS with a global shortcut and a clear visual indicator. It\u0026rsquo;s inspired by VCM for Windows.\nMute with the shortcut Cmd Shift A or from the system tray dropdown menu.\nMute window follows cursor to screens and monitors The mute indicator window will follow the cursor to desktops or screens and monitors. The system tray icon will also indicate the mute status. Once microphones are on again, the window will hide. View releases.\nUpdate: What I use now My journey finding the best solution for this has evolved. I now use Hammerspoon which is a delightful way to hack together MacOS scripts. The Lua scripting in Hammerspoon makes maintaining this a lot more fun than foreign functions in Rust. I\u0026rsquo;m still able to use the hotkey âŒ˜ â‡§ A and I\u0026rsquo;ve also mapped it to a macropad that uses F13. My script also supports Push To Talk.\nMuted and unmuted indicators:\nHere\u0026rsquo;s the solution:\nmuteAlertId = nil -- Clear the alert if exists to avoid notifications stacking local function clearMuteAlert() if muteAlertId then hs.alert.closeSpecific(muteAlertId) end end -- Hold the hotkey for Push To Talk local holdingToTalk = false local function pushToTalk() holdingToTalk = true local audio = hs.audiodevice.defaultInputDevice() local muted = audio:inputMuted() if muted then clearMuteAlert() muteAlertId = hs.alert.show(\u0026#34;ðŸŽ¤ Microphone on\u0026#34;, true) audio:setInputMuted(false) end end -- Toggles the default microphone\u0026#39;s mute state on hotkey release -- or performs PTT when holding down the hotkey local function toggleMuteOrPTT() local audio = hs.audiodevice.defaultInputDevice() local muted = audio:inputMuted() local muting = not muted if holdingToTalk then holdingToTalk = false audio:setInputMuted(true) muting = true else audio:setInputMuted(muting) end clearMuteAlert() if muting then muteAlertId = hs.alert.show(\u0026#34;ðŸ“µ Microphone muted\u0026#34;) else muteAlertId = hs.alert.show(\u0026#34;ðŸŽ¤ Microphone on\u0026#34;) end end -- `âŒ˜ â‡§ A` but you could also map to F13 for a macropad hs.hotkey.bind({\u0026#34;cmd\u0026#34;, \u0026#34;shift\u0026#34;}, \u0026#34;a\u0026#34;, nil, toggleMuteOrPTT, pushToTalk) Hammerspoon also makes it incredibly easy to add other utilities, such as making a hotkey to change the default audio output or input. Find the latest source in my dotfiles.\nView dotfiles ","banner_image":"https://brett.cloud/mic-mute/alert-off_hua822f4c5ac5371f90ecebf3e2fab0d52_210195_480x360_fit_box_3.png","date_published":"2023-03-11T00:00:00Z","date_modified":"2023-03-11T00:00:00Z"},{"id":"901c7f5a-0779-5b5d-d968-717f1b5ec8a1","url":"https://brett.cloud/self-hosted/","title":"You can self-host","summary":"Remember the iPhone commercial from the late 2000s which introduced Apple\u0026rsquo;s AppStore with the phrase, \u0026ldquo;There\u0026rsquo;s an app for that\u0026rdquo;? That\u0026rsquo;s how open source services are now. There\u0026rsquo;s a wide selection of useful and mature software that containerization has made exceptionally portable.\nMy own homelab has become a monorepo of DevOps overkill, but self-hosting can be simple and easy with Docker. You can securely host applications with a cheap desktop in your home with minimal effort and a single docker-compose configuration file.","content_text":"Remember the iPhone commercial from the late 2000s which introduced Apple\u0026rsquo;s AppStore with the phrase, \u0026ldquo;There\u0026rsquo;s an app for that\u0026rdquo;? That\u0026rsquo;s how open source services are now. There\u0026rsquo;s a wide selection of useful and mature software that containerization has made exceptionally portable.\nMy own homelab has become a monorepo of DevOps overkill, but self-hosting can be simple and easy with Docker. You can securely host applications with a cheap desktop in your home with minimal effort and a single docker-compose configuration file.\nDemo I\u0026rsquo;ve set up a simple demo to host an application.\nDocker compose offers a very simple way to run and maintain self-hosted homelab. The configuration is portable, easy to understand, and a container orchestration can be run on a single node with just one command. As I demonstrate here, the available tooling makes DNS and proxying automation and the service setup very easy.\nThis demo hosts a simple Elixir notebook application called Livebook. I work in an Elixir shop where Livebook is a local favorite. Livebook uses notebooks similar to Python\u0026rsquo;s Jupyter except it\u0026rsquo;s built with Elixir and has real-time syncing between clients because it\u0026rsquo;s built on the Phoenix framework\u0026rsquo;s library LiveView.\nThis demo will set up a Cloudflared tunnel connection, a Traefik reverse proxy and the Livebook app. Cloudflare DNS is automated with CNAME creation from Traefik routes. There\u0026rsquo;s no port forwarding required to host this app on a domain you own.\nHere\u0026rsquo;s a sketch of the architecture:\ngraph TB tf(Terraform) -.- dns tf -.- argo dns{Cloudflare DNS} --\u003e argo argo((Cloudflare Tunnels)) == Tunnel ==\u003e cloudflared ddns -.- dns subgraph lan[Docker Network] style lan stroke-dasharray: 5 5 cloudflared --\u003e traefik[Traefik reverse proxy] traefik --\u003e livebook[Livebook] ddns[cloudflare-companion] -. service discovery .- livebook end Mermaid.js diagram of the architecture The phony make targets below are used to simplify each step. Look at the Makefile to see what each one does.\nSetup First, initialize the config file and terraform project.\nmake setup This creates a .env file which you should edit with your own secrets. CLOUDFLARE_API_TOKEN needs Zone.DNS and Account.Cloudflare Tunnel write permissions for the domain in use. Use an API token, not an API key. The value for CLOUDFLARE_TUNNEL_TOKEN will come later.\nThen, create the Cloudflared tunnel. You\u0026rsquo;ll need Terraform, unless you create it from the Cloudflare Zero Trust dashboard. Note, using the dashboard setup, point the tunnel endpoint to http://traefik:80 as the cloudflared image sees the host within the docker network.\nmake terraform This plans and applies the terraform tunnel configuration. It creates a CNAME record tunnel.example.com that points to the Cloudflared tunnel URL.\nFind the tunnel_token value in the terraform output file ./tunnel/terraform.tfstate and add it as the value of CLOUDFLARE_TUNNEL_TOKEN.\nRun Start the docker compose.\nmake start This runs docker-compose --compatibility up. The compatibility flag appears to be required in order to set resource limits in docker-compose.\nYou can self-host Self-hosting is a satisfying hobby with amazing utility. These methods also provide ways to try out new technologies, host a simple blog, or make use of existing services that you find on GitHub. Let me know if the demo has helped you along with your own homelab.","banner_image":"https://brett.cloud/self-hosted/stay_at_home_server_hua546888e0a1aeece26c0c86890efd2ee_56965_480x360_fit_q75_box.jpg","date_published":"2023-01-13T00:00:00Z","date_modified":"2023-01-13T00:00:00Z"},{"id":"f284305b-ffa1-5d5a-a951-fb9592442989","url":"https://brett.cloud/homelab/","title":"Homelab","summary":"Don\u0026rsquo;t be fooled, having a home server is really just hundreds of hours of badblocks.\nI\u0026rsquo;ve been hard at work recently converting my architecture to support orchestrated deployments with multiple nodes. I haven\u0026rsquo;t quite achieved high-availability, and I\u0026rsquo;m not likely to take things that far. However, it has been an excellent journey to become more acquainted with Kubernetes.\nSetup and usage are inspired by a homelab gitops template and the k8s-at-home community.","content_text":"Don\u0026rsquo;t be fooled, having a home server is really just hundreds of hours of badblocks.\nI\u0026rsquo;ve been hard at work recently converting my architecture to support orchestrated deployments with multiple nodes. I haven\u0026rsquo;t quite achieved high-availability, and I\u0026rsquo;m not likely to take things that far. However, it has been an excellent journey to become more acquainted with Kubernetes.\nSetup and usage are inspired by a homelab gitops template and the k8s-at-home community. You can find similar setups with the k8s at home search. Historical revisions of my homelab setup had rootless Podman containers deployed with ansible as systemd units. Prior to that, I used docker-compose to orchestrate containers on a single node.\nSetup Here have been some of my goals:\nLots of self-hosted services Flux GitOps with this repository (cluster directory) Ansible node provisioning and K3s setup (Ansible roles and playbooks) Terraform DNS records (terraform) SOPS secrets stored in Git Renovate bot dependency updates WireGuard VPN pod gateway via paid service WireGuard VPN proxy hosted on VPS Cloudflared HTTP tunnel K8s gateway for local DNS resolution to cluster and NGINX ingress controller Both internal \u0026amp; external services with a service gateway OIDC authentication with LDAP Automatic Cloudflare DNS updates (ddns cronjob) MetalLB bare metal K8s network loadbalancing Calico CNI ZFS JBOD mergerfs union NFS with SnapRAID backup for low-touch media files (snapraid-runner cluster cronjob) Restic backups to remote and local buckets (backup namespace) go-task shorthand for useful commands (Taskfile and taskfiles) Some questions Why use ECC RAM? Hacker News discussion If you love your data, use ECC RAM Error rates increase rapidly with rising altitude Hardware I finally upgraded my media server chassis to a Supermicro CSE-826. For almost 7 years I was using a Node 804, which is popular among hobbyists because it fits 8x 3.5\u0026quot; drivers. I use old desktop hardware for this NAS and other nodes.\nI used a widely-known and inexpensive method to add additional SATA storage via a Host Bus Adapter (HBA). I purchased a Dell Perc H310 a long while back. Mine did come from overseas, but it turned out to be legit. This video shows how it can be flashed to an LSI 9211-8i IT (it\u0026rsquo;s called IT mode; see also 1, 2).\nHere are other recommended controllers.","banner_image":"https://brett.cloud/homelab/k8s_hu5388a6b7350de9f8decb62b7a61e4b81_738611_480x360_fit_box_1.gif","date_published":"2022-11-02T00:00:00Z","date_modified":"2022-11-02T00:00:00Z"},{"id":"e68fe3a3-8874-56e1-c9d3-c5ecfbf71717","url":"https://brett.cloud/dotfiles/","title":"Dotfiles","summary":"My dotfiles are easy to setup for both desktop consoles and headless servers. I use Make, bash scripts and dotbot, an idempotent python script which configures directories, creates symlinks and run postscripts for Linux and macOS. I\u0026rsquo;ve broken the dotbot configuration out into multiple modules to select features suited for different environments.\nI\u0026rsquo;ve simplifed my nvim and emacs configurations by just using Astronvim and Doom respectively. While I love i3, I\u0026rsquo;m in the process of configuring Sway to see if I can match my productivity on Wayland.","content_text":"My dotfiles are easy to setup for both desktop consoles and headless servers. I use Make, bash scripts and dotbot, an idempotent python script which configures directories, creates symlinks and run postscripts for Linux and macOS. I\u0026rsquo;ve broken the dotbot configuration out into multiple modules to select features suited for different environments.\nI\u0026rsquo;ve simplifed my nvim and emacs configurations by just using Astronvim and Doom respectively. While I love i3, I\u0026rsquo;m in the process of configuring Sway to see if I can match my productivity on Wayland.","banner_image":"https://brett.cloud/dotfiles/i3_hu8a7a1309f593df3d9578fca7ed3a885a_968028_480x360_fit_box_3.png","date_published":"2021-10-27T00:00:00Z","date_modified":"2021-10-27T00:00:00Z"},{"id":"89d79fc2-85fe-58b9-c959-306b6442fd05","url":"https://brett.cloud/scihub/","title":"Elbakyan is a heroine for modern science","summary":"A popular article was recently published about the history of Alexandra Elbakyan\u0026rsquo;s Sci-Hub, a website that makes academic journal papers free to everyone. It\u0026rsquo;s a controversial topic following last year\u0026rsquo;s civil litigation by two major publishers, Elsevier and the American Chemical Society. Most recently, Cloudfare responded to the court\u0026rsquo;s injunction by terminating service to Sci-Hub\u0026rsquo;s domains (this brings up additional ethical concern). Meanwhile, Sci-Hub dances away out of reach by staying available on other domain names inaccessible to the US without a VPN.","content_text":"A popular article was recently published about the history of Alexandra Elbakyan\u0026rsquo;s Sci-Hub, a website that makes academic journal papers free to everyone. It\u0026rsquo;s a controversial topic following last year\u0026rsquo;s civil litigation by two major publishers, Elsevier and the American Chemical Society. Most recently, Cloudfare responded to the court\u0026rsquo;s injunction by terminating service to Sci-Hub\u0026rsquo;s domains (this brings up additional ethical concern). Meanwhile, Sci-Hub dances away out of reach by staying available on other domain names inaccessible to the US without a VPN.\nAlexandra has become somewhat of a Martin Luther of science. Except her Ninety-five Theses is instead a database of 64 million academic papers in PDF. Her work makes science more accessible to the laity, instead of a submission to the interpretation and approval of academics from high-status institutions. My own Bachelor of Science makes me nervous about the implications of lay folk making decisions based on studies perused without understanding rigorous philosophies of science. However, this is an unavoidable aspect already being carried out by the shallow community of anti-science, FDA-approved pill pushers and social influencers with their online degrees and beauty blogs. But imagine a different scene of coffee shop discussions of fruit fly sleep cycles or dinner table deliberation over neuronal action potential.\nPaywalls and walled gardens for publications with insurmountable price tags make learning an exclusive, invite-only process for elite institutions. The effects of Reverend Luther\u0026rsquo;s translations of the bible to the German vernacular had tremendous impact on both religious and cultural contexts. With Sci-Hub making scientific studies more widely available, I wonder if these academic papers could receive the same widespread scrutiny that open source code receives from the software community. Even rigorous disciplines receive contributions from amateur enthusiasts, like the hobbyist who recently found NASA\u0026rsquo;s lost satellite.\nI am convinced that this is not primarily an economic issue but a moral one. While we\u0026rsquo;re bombarded with an endless stream of media in this digital era (like a DoS attack on our attention), what effect would open discussions of empirical sources have on the quality of our media consumption, and even the advancement of our society? This is all a bit idealistic, but imagine this: a new generation of young scientists with the democratization of evidence-based persuasion. Taxpayers should have access to the research they paid for. Publishers hoard and monetize public research, but hopefully not for long.","banner_image":"https://brett.cloud/scihub/scihub_hu641c9f4ae817549002bf605f75297ea9_2822564_480x360_fit_box_3.png","date_published":"2018-02-09T00:00:00Z","date_modified":"2018-02-09T00:00:00Z"},{"id":"1b0bc974-10e4-5e7e-89b0-924fce4212f1","url":"https://brett.cloud/hackintosh/","title":"Building a Hackintosh","summary":"Apple\u0026rsquo;s overpriced offering is moving away from modular, upgradable hardware. Some recent unveils of the iMac, Mac Pro, and MacBook Pro failed to meet the expectations of many professionals that demand improved specifications. Using the more powerful hardware available with macOS can be the ultimate environment for a developerâ€”Unix coupled with strong machinery. For example, at the time of writing this, I\u0026rsquo;m on my Kaby Lake build, but current Apple hardware doesn\u0026rsquo;t offer the newest Intel generation.","content_text":"Apple\u0026rsquo;s overpriced offering is moving away from modular, upgradable hardware. Some recent unveils of the iMac, Mac Pro, and MacBook Pro failed to meet the expectations of many professionals that demand improved specifications. Using the more powerful hardware available with macOS can be the ultimate environment for a developerâ€”Unix coupled with strong machinery. For example, at the time of writing this, I\u0026rsquo;m on my Kaby Lake build, but current Apple hardware doesn\u0026rsquo;t offer the newest Intel generation. This is currently experimental in the community, but more stable options do exist with Skylake hardware.\nI first started developing on a MacBook. There are aspects of Apple\u0026rsquo;s laptops that other hardware manufactures have not been able to match for me quite yet. But as for a desktop where form factor, sleek aluminum design, and the responsive trackpad are not concerns, then a Hackintosh is the way to go for tabletop computing.\nShould you build a hackintosh? Probably not. It\u0026rsquo;s a breach of Apple\u0026rsquo;s macOS Terms and Conditions and they have sued companies that attempt to turn a profit. However, Apple has been kind and hasn\u0026rsquo;t litigated individuals. Building a Hackintosh involves a lot of troubleshooting and tinkering. But if you\u0026rsquo;re okay with all of this, then try it out! The first place to start is to begin lurking in the community (/r/hackintosh).\nI\u0026rsquo;ve posted a guide to my most recent build where I use the latest Kaby Lake Intel processor and the latest mobo. I use an NVMe SSD, bluetooth accessories, iMessage, and other necessary features. My passion for Hackintosh fluctuates with my availability, but you can see my builds, guides and troubleshooting research at brettinternet/hackintosh.\nFeb 2019 update: Proprietary software can be frustrating and in privacy matters and developer support Apple appears to be straying further from the light. I\u0026rsquo;ve archived my personal Hackintosh project and moved on to Linux.","banner_image":"https://brett.cloud/hackintosh/system-info_hu5332827d747aac0d8d272223a05a0066_60588_480x360_fit_box_3.png","date_published":"2017-04-23T00:00:00Z","date_modified":"2017-04-23T00:00:00Z"},{"id":"85242e44-ec94-5232-d9da-90300358d0a5","url":"https://brett.cloud/notes/","title":"Manage notes with markdown and git","summary":"In school, to keep up with my peers, I took meticulous notes. I read and reread assignments, and I constantly evaluated my priorities to stay on task. I became obsessed with managing my productivity. I\u0026rsquo;ve used feature-rich apps like OmniFocus or Wunderlist and simpler tools like Apple Reminders.\nFor a while I used Evernote for note-taking, then I tried OneNote, Apple Notes and even Google Keep. I left Evernote because they\u0026rsquo;d seemed to have lost their way with gimmicky features.","content_text":"In school, to keep up with my peers, I took meticulous notes. I read and reread assignments, and I constantly evaluated my priorities to stay on task. I became obsessed with managing my productivity. I\u0026rsquo;ve used feature-rich apps like OmniFocus or Wunderlist and simpler tools like Apple Reminders.\nFor a while I used Evernote for note-taking, then I tried OneNote, Apple Notes and even Google Keep. I left Evernote because they\u0026rsquo;d seemed to have lost their way with gimmicky features. I liked that OneNote didn\u0026rsquo;t force-feed a premium option and it was just as accessible as Evernote. Later, I thought that maybe Apple Notes would be just enough for me, but I eventually found that it wasn\u0026rsquo;t better for anything other than lists or using the touch draw feature.\nNow as a developer, I use markdown in my text editor. This process for note-taking certainly isn\u0026rsquo;t novel â€“ you\u0026rsquo;ll even find books on GitHub written with markdown. Markdown offers the most formatting versatility, especially to display code excerpts with syntax highlighting and quickly reference links, create lists, and break notes out by sections. This is especially true since GitHub\u0026rsquo;s flavoring and small enhancements have made markdown previewing so accessible. Even this blog is made using markdown.\nMarkdown I love markdown. I like how widely support it is, and I like how clear markdown format is to convey information. Markdown has become the ubiquitous plain text format for the GitHub community. My own blog posts are written in markdown (brettinternet.github.io). Composing markdown is a timeless method that isn\u0026rsquo;t married any third party tools except a modern text editor (which isn\u0026rsquo;t going anywhere).\nIt\u0026rsquo;s true, this method isn\u0026rsquo;t perfect. I need separate tools for sketches and PDF markups. But these mediums make up about 0.5% of all my notes. I just use my NextCloud for storing files or Keybase for my public documents.\nSome recent specification has been proposed to standardize Github\u0026rsquo;s flavor of markdown. One of my favorite introductions to markdown can be found here. Commonmark was put together by a few representatives of some major companies that use markdown like GitHub, Reddit, and Stack Exchange. Some nonconforming markdown features have added some very nice features such as task lists, autolinking, diff and code block improvements.\nGit Right now I have a BitBucket separate GitHub repo for my private notes and another for my public notes. Eventually, I\u0026rsquo;d like to self-host my own GitLab within my homelab.\nMy commit messages are short, but I attempt to make them meaningful so I can see my note history and refer back to find deleted excerpts. I also use aliases for git commands to make pushing to master very fast.\nDesktop I use Vim and VS Code. To me, taking notes in my editor environment is the best possible scenario since I\u0026rsquo;m most comfortable with the shortcuts. VS Code offers a markdown previewer out of the box with ctrl + shift + v. Markdown\u0026rsquo;s lifespan on desktop will exceed my own, so I\u0026rsquo;m no longer bound to an app\u0026rsquo;s survival on a platform to access my notes.\nShareX is a good option for screenshots on PC or Flameshot or GIMP on Linux. I tend to think that a simple bookmark is better than web clippings. EverNote certainly has the strongest clipper, and I do like that OneNote\u0026rsquo;s web clipper is open source.\nMobile Before I found Working Copy, a solid mobile git solution for iOS was the missing piece for keeping notes in a git repository. I\u0026rsquo;m sure there are equally polished options on Android. With Working Copy you can fetch repos for free, but you\u0026rsquo;ll have to pay to unlock push. The app is very polished, so I think it\u0026rsquo;s worth it to support this developer. SSH keys are supported, language highlighting and markdown and plain text previews. It\u0026rsquo;s an excellent mobile option for iOS.\nSave Menu Everything not saved will be lost.\n- Nintendo \u0026ldquo;Quit Screen\u0026rdquo; message\nLike an accessible save menu, I keep everything in markdown. I record docker commands and obscure command-line arguments, JavaScript toy problems, or directions to setup Postgres permissions. I also create slides with markdown. I\u0026rsquo;ll only make a note of something if it\u0026rsquo;s easier to reference my notes than it is to Google search it. I also take notes to help out the students that I mentor. You can checkout my public notes on GitHub but you can\u0026rsquo;t see my private ones ðŸ˜‰.\nI use a combination of Apple Reminders and private GitHub issues with task lists for short term personal tasks, and GitHub Projects to visualize Kanban project and portfolio management. But for notes, I like good ol\u0026rsquo; fashioned git and markdown. I use a private repository for my personal notes, and a separate repo for my public notes. I believe this method is the strongest embrace of trustworthy technology. Git and markdown are two timeless tools that are sure to be around for a long time.\nJune 2020 update: As of this year, I have begun experimenting with a much simpler approach for tracking work-in-progress: todo.txt. More on this to come.","date_published":"2017-02-06T00:00:00Z","date_modified":"2017-02-06T00:00:00Z"},{"id":"3c66b97d-3906-5ff5-f959-15ca8ef956f1","url":"https://brett.cloud/about/","title":"About me","summary":"code with me recruit me work with me Brett Gardiner has been hard at work writing production code with an enterprise quality fit for solving problems at different scales and velocities. Brett is passionate about a variety of technologies and enjoys making a positive impact by delivering meaningful software for customers. GitHub LinkedIn What do I like? I like my family, pizza, Linux, reading, spinach but not arugula, early morning hikes in the Rocky Mountains, custom keyboards, and tinkering with IoT devices.","content_text":" code with me recruit me work with me Brett Gardiner has been hard at work writing production code with an enterprise quality fit for solving problems at different scales and velocities. Brett is passionate about a variety of technologies and enjoys making a positive impact by delivering meaningful software for customers. GitHub LinkedIn What do I like? I like my family, pizza, Linux, reading, spinach but not arugula, early morning hikes in the Rocky Mountains, custom keyboards, and tinkering with IoT devices.\nWhat are my hobbies? I play pickleball, hike and camp. I also have numerous ongoing projects such as a self-hosted kubernetes homelab and moonlighting programming projects.\nHow do we get in touch? Please try one of the channels linked above.\nYou may also reach me at:\nhi@[this website's domain]","banner_image":"https://brett.cloud/about/profile_hu89dd9f0a2a539a08d41a23b9079e52ba_351109_480x360_fit_box_3.png","date_published":"0001-01-01T00:00:00Z","date_modified":"0001-01-01T00:00:00Z"}]}